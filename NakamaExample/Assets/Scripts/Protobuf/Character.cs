// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.Character
{

    /// <summary>Holder for reflection information generated from character.proto</summary>
    public static partial class CharacterReflection
    {

        #region Descriptor
        /// <summary>File descriptor for character.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static CharacterReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg9jaGFyYWN0ZXIucHJvdG8SBG1haW4ixAIKCUNoYXJhY3RlchIoCgVjbGFz",
                  "cxgBIAEoDjIZLm1haW4uQ2hhcmFjdGVyLkNsYXNzTmFtZRINCgVsZXZlbBgC",
                  "IAEoBRIoCgpiYXNlX3N0YXRzGAMgASgLMhQubWFpbi5DaGFyYWN0ZXJTdGF0",
                  "cxIhChllcXVpcHBlZF9pdGVtX21haW5oYW5kX2lkGAQgASgDEiAKGGVxdWlw",
                  "cGVkX2l0ZW1fb2ZmaGFuZF9pZBgFIAEoAxIWCg5jdXJyZW50X2hlYWx0aBgG",
                  "IAEoAhIVCg1jdXJyZW50X3Bvd2VyGAcgASgCImAKCUNsYXNzTmFtZRILCgdX",
                  "YXJyaW9yEAASCgoGUmFuZ2VyEAESCwoHV2FybG9jaxACEgoKBldpemFyZBAD",
                  "EgoKBkNsZXJpYxAEEgkKBVJvdWdlEAUSCgoGUHJpZXN0EAYiZwoOQ2hhcmFj",
                  "dGVyU3RhdHMSEAoIc3RyZW5ndGgYASABKAUSDwoHYWdpbGl0eRgCIAEoBRIP",
                  "CgdzdGFtaW5hGAMgASgFEhEKCWludGVsbGVjdBgEIAEoBRIOCgZ3aXNkb20Y",
                  "BSABKAVCHqoCG05ha2FtYU1pbmltYWxHYW1lLkNoYXJhY3RlcmIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.Character.Character), global::NakamaMinimalGame.Character.Character.Parser, new[]{ "Class", "Level", "BaseStats", "EquippedItemMainhandId", "EquippedItemOffhandId", "CurrentHealth", "CurrentPower" }, null, new[]{ typeof(global::NakamaMinimalGame.Character.Character.Types.ClassName) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.Character.CharacterStats), global::NakamaMinimalGame.Character.CharacterStats.Parser, new[]{ "Strength", "Agility", "Stamina", "Intellect", "Wisdom" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Character : pb::IMessage<Character>
    {
        private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Character> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.Character.CharacterReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Character()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Character(Character other) : this()
        {
            class_ = other.class_;
            level_ = other.level_;
            BaseStats = other.baseStats_ != null ? other.BaseStats.Clone() : null;
            equippedItemMainhandId_ = other.equippedItemMainhandId_;
            equippedItemOffhandId_ = other.equippedItemOffhandId_;
            currentHealth_ = other.currentHealth_;
            currentPower_ = other.currentPower_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Character Clone()
        {
            return new Character(this);
        }

        /// <summary>Field number for the "class" field.</summary>
        public const int ClassFieldNumber = 1;
        private global::NakamaMinimalGame.Character.Character.Types.ClassName class_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.Character.Character.Types.ClassName Class
        {
            get { return class_; }
            set
            {
                class_ = value;
            }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level
        {
            get { return level_; }
            set
            {
                level_ = value;
            }
        }

        /// <summary>Field number for the "base_stats" field.</summary>
        public const int BaseStatsFieldNumber = 3;
        private global::NakamaMinimalGame.Character.CharacterStats baseStats_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.Character.CharacterStats BaseStats
        {
            get { return baseStats_; }
            set
            {
                baseStats_ = value;
            }
        }

        /// <summary>Field number for the "equipped_item_mainhand_id" field.</summary>
        public const int EquippedItemMainhandIdFieldNumber = 4;
        private long equippedItemMainhandId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EquippedItemMainhandId
        {
            get { return equippedItemMainhandId_; }
            set
            {
                equippedItemMainhandId_ = value;
            }
        }

        /// <summary>Field number for the "equipped_item_offhand_id" field.</summary>
        public const int EquippedItemOffhandIdFieldNumber = 5;
        private long equippedItemOffhandId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EquippedItemOffhandId
        {
            get { return equippedItemOffhandId_; }
            set
            {
                equippedItemOffhandId_ = value;
            }
        }

        /// <summary>Field number for the "current_health" field.</summary>
        public const int CurrentHealthFieldNumber = 6;
        private float currentHealth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CurrentHealth
        {
            get { return currentHealth_; }
            set
            {
                currentHealth_ = value;
            }
        }

        /// <summary>Field number for the "current_power" field.</summary>
        public const int CurrentPowerFieldNumber = 7;
        private float currentPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CurrentPower
        {
            get { return currentPower_; }
            set
            {
                currentPower_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Character);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Character other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Class != other.Class) return false;
            if (Level != other.Level) return false;
            if (!object.Equals(BaseStats, other.BaseStats)) return false;
            if (EquippedItemMainhandId != other.EquippedItemMainhandId) return false;
            if (EquippedItemOffhandId != other.EquippedItemOffhandId) return false;
            if (CurrentHealth != other.CurrentHealth) return false;
            if (CurrentPower != other.CurrentPower) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Class != 0) hash ^= Class.GetHashCode();
            if (Level != 0) hash ^= Level.GetHashCode();
            if (baseStats_ != null) hash ^= BaseStats.GetHashCode();
            if (EquippedItemMainhandId != 0L) hash ^= EquippedItemMainhandId.GetHashCode();
            if (EquippedItemOffhandId != 0L) hash ^= EquippedItemOffhandId.GetHashCode();
            if (CurrentHealth != 0F) hash ^= CurrentHealth.GetHashCode();
            if (CurrentPower != 0F) hash ^= CurrentPower.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Class != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Class);
            }
            if (Level != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Level);
            }
            if (baseStats_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(BaseStats);
            }
            if (EquippedItemMainhandId != 0L)
            {
                output.WriteRawTag(32);
                output.WriteInt64(EquippedItemMainhandId);
            }
            if (EquippedItemOffhandId != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(EquippedItemOffhandId);
            }
            if (CurrentHealth != 0F)
            {
                output.WriteRawTag(53);
                output.WriteFloat(CurrentHealth);
            }
            if (CurrentPower != 0F)
            {
                output.WriteRawTag(61);
                output.WriteFloat(CurrentPower);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Class != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Class);
            }
            if (Level != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
            }
            if (baseStats_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseStats);
            }
            if (EquippedItemMainhandId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquippedItemMainhandId);
            }
            if (EquippedItemOffhandId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquippedItemOffhandId);
            }
            if (CurrentHealth != 0F)
            {
                size += 1 + 4;
            }
            if (CurrentPower != 0F)
            {
                size += 1 + 4;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Character other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Class != 0)
            {
                Class = other.Class;
            }
            if (other.Level != 0)
            {
                Level = other.Level;
            }
            if (other.baseStats_ != null)
            {
                if (baseStats_ == null)
                {
                    baseStats_ = new global::NakamaMinimalGame.Character.CharacterStats();
                }
                BaseStats.MergeFrom(other.BaseStats);
            }
            if (other.EquippedItemMainhandId != 0L)
            {
                EquippedItemMainhandId = other.EquippedItemMainhandId;
            }
            if (other.EquippedItemOffhandId != 0L)
            {
                EquippedItemOffhandId = other.EquippedItemOffhandId;
            }
            if (other.CurrentHealth != 0F)
            {
                CurrentHealth = other.CurrentHealth;
            }
            if (other.CurrentPower != 0F)
            {
                CurrentPower = other.CurrentPower;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            class_ = (global::NakamaMinimalGame.Character.Character.Types.ClassName)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            Level = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            if (baseStats_ == null)
                            {
                                baseStats_ = new global::NakamaMinimalGame.Character.CharacterStats();
                            }
                            input.ReadMessage(baseStats_);
                            break;
                        }
                    case 32:
                        {
                            EquippedItemMainhandId = input.ReadInt64();
                            break;
                        }
                    case 40:
                        {
                            EquippedItemOffhandId = input.ReadInt64();
                            break;
                        }
                    case 53:
                        {
                            CurrentHealth = input.ReadFloat();
                            break;
                        }
                    case 61:
                        {
                            CurrentPower = input.ReadFloat();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Character message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum ClassName
            {
                [pbr::OriginalName("Warrior")] Warrior = 0,
                [pbr::OriginalName("Ranger")] Ranger = 1,
                [pbr::OriginalName("Warlock")] Warlock = 2,
                [pbr::OriginalName("Wizard")] Wizard = 3,
                [pbr::OriginalName("Cleric")] Cleric = 4,
                [pbr::OriginalName("Rouge")] Rouge = 5,
                [pbr::OriginalName("Priest")] Priest = 6,
            }

        }
        #endregion

    }

    public sealed partial class CharacterStats : pb::IMessage<CharacterStats>
    {
        private static readonly pb::MessageParser<CharacterStats> _parser = new pb::MessageParser<CharacterStats>(() => new CharacterStats());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CharacterStats> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.Character.CharacterReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterStats()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterStats(CharacterStats other) : this()
        {
            strength_ = other.strength_;
            agility_ = other.agility_;
            stamina_ = other.stamina_;
            intellect_ = other.intellect_;
            wisdom_ = other.wisdom_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterStats Clone()
        {
            return new CharacterStats(this);
        }

        /// <summary>Field number for the "strength" field.</summary>
        public const int StrengthFieldNumber = 1;
        private int strength_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Strength
        {
            get { return strength_; }
            set
            {
                strength_ = value;
            }
        }

        /// <summary>Field number for the "agility" field.</summary>
        public const int AgilityFieldNumber = 2;
        private int agility_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Agility
        {
            get { return agility_; }
            set
            {
                agility_ = value;
            }
        }

        /// <summary>Field number for the "stamina" field.</summary>
        public const int StaminaFieldNumber = 3;
        private int stamina_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Stamina
        {
            get { return stamina_; }
            set
            {
                stamina_ = value;
            }
        }

        /// <summary>Field number for the "intellect" field.</summary>
        public const int IntellectFieldNumber = 4;
        private int intellect_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Intellect
        {
            get { return intellect_; }
            set
            {
                intellect_ = value;
            }
        }

        /// <summary>Field number for the "wisdom" field.</summary>
        public const int WisdomFieldNumber = 5;
        private int wisdom_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Wisdom
        {
            get { return wisdom_; }
            set
            {
                wisdom_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CharacterStats);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CharacterStats other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Strength != other.Strength) return false;
            if (Agility != other.Agility) return false;
            if (Stamina != other.Stamina) return false;
            if (Intellect != other.Intellect) return false;
            if (Wisdom != other.Wisdom) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Strength != 0) hash ^= Strength.GetHashCode();
            if (Agility != 0) hash ^= Agility.GetHashCode();
            if (Stamina != 0) hash ^= Stamina.GetHashCode();
            if (Intellect != 0) hash ^= Intellect.GetHashCode();
            if (Wisdom != 0) hash ^= Wisdom.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Strength != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Strength);
            }
            if (Agility != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Agility);
            }
            if (Stamina != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Stamina);
            }
            if (Intellect != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(Intellect);
            }
            if (Wisdom != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(Wisdom);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Strength != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Strength);
            }
            if (Agility != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Agility);
            }
            if (Stamina != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
            }
            if (Intellect != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Intellect);
            }
            if (Wisdom != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wisdom);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CharacterStats other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Strength != 0)
            {
                Strength = other.Strength;
            }
            if (other.Agility != 0)
            {
                Agility = other.Agility;
            }
            if (other.Stamina != 0)
            {
                Stamina = other.Stamina;
            }
            if (other.Intellect != 0)
            {
                Intellect = other.Intellect;
            }
            if (other.Wisdom != 0)
            {
                Wisdom = other.Wisdom;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Strength = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Agility = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            Stamina = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            Intellect = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            Wisdom = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
