// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matchstate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.PublicMatchState
{

    /// <summary>Holder for reflection information generated from matchstate.proto</summary>
    public static partial class MatchstateReflection
    {

        #region Descriptor
        /// <summary>File descriptor for matchstate.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MatchstateReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChBtYXRjaHN0YXRlLnByb3RvEgRtYWluIpcXChBQdWJsaWNNYXRjaFN0YXRl",
                  "EgwKBHRpY2sYASABKAMSOAoJY29tYmF0bG9nGAIgAygLMiUubWFpbi5QdWJs",
                  "aWNNYXRjaFN0YXRlLkNvbWJhdExvZ0VudHJ5Ej4KDGludGVyYWN0YWJsZRgD",
                  "IAMoCzIoLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5JbnRlcmFjdGFibGVFbnRy",
                  "eRI6Cgpwcm9qZWN0aWxlGAQgAygLMiYubWFpbi5QdWJsaWNNYXRjaFN0YXRl",
                  "LlByb2plY3RpbGVFbnRyeRpYChFJbnRlcmFjdGFibGVFbnRyeRILCgNrZXkY",
                  "ASABKAkSMgoFdmFsdWUYAiABKAsyIy5tYWluLlB1YmxpY01hdGNoU3RhdGUu",
                  "SW50ZXJhY3RhYmxlOgI4ARpUCg9Qcm9qZWN0aWxlRW50cnkSCwoDa2V5GAEg",
                  "ASgJEjAKBXZhbHVlGAIgASgLMiEubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlBy",
                  "b2plY3RpbGU6AjgBGo8OCg5Db21iYXRMb2dFbnRyeRIRCgl0aW1lc3RhbXAY",
                  "ASABKAMSEQoJc291cmNlX2lkGAIgASgJEhYKDmRlc3RpbmF0aW9uX2lkGAMg",
                  "ASgJEksKBnNvdXJjZRgEIAEoDjI7Lm1haW4uUHVibGljTWF0Y2hTdGF0ZS5D",
                  "b21iYXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9Tb3VyY2USGQoPc291cmNl",
                  "X3NwZWxsX2lkGAUgASgDSAASGgoQc291cmNlX2VmZmVjdF9pZBgGIAEoA0gA",
                  "Ek0KBmRhbWFnZRgHIAEoCzI7Lm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Db21i",
                  "YXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9EYW1hZ2VIARJSCgttaXNzZWRf",
                  "dHlwZRgIIAEoDjI7Lm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Db21iYXRMb2dF",
                  "bnRyeS5Db21iYXRMb2dFbnRyeV9NaXNzZWRIARJXCgtpbnRlcnJ1cHRlZBgJ",
                  "IAEoCzJALm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Db21iYXRMb2dFbnRyeS5D",
                  "b21iYXRMb2dFbnRyeV9JbnRlcnJ1cHRlZEgBEkkKBGF1cmEYCiABKAsyOS5t",
                  "YWluLlB1YmxpY01hdGNoU3RhdGUuQ29tYmF0TG9nRW50cnkuQ29tYmF0TG9n",
                  "RW50cnlfQXVyYUgBEkkKBGNhc3QYCyABKAsyOS5tYWluLlB1YmxpY01hdGNo",
                  "U3RhdGUuQ29tYmF0TG9nRW50cnkuQ29tYmF0TG9nRW50cnlfQ2FzdEgBEhgK",
                  "DnN5c3RlbV9tZXNzYWdlGAwgASgJSAEagAEKFUNvbWJhdExvZ0VudHJ5X0Rh",
                  "bWFnZRIOCgZhbW91bnQYASABKAISEAoIcmVzaXN0ZWQYAiABKAISDwoHYmxv",
                  "Y2tlZBgDIAEoAhIQCghhYnNvcmJlZBgEIAEoAhIQCghjcml0aWNhbBgFIAEo",
                  "AhIQCghvdmVya2lsbBgGIAEoAhpbChNDb21iYXRMb2dFbnRyeV9IZWFsEg4K",
                  "BmFtb3VudBgBIAEoAhIQCghhYnNvcmJlZBgCIAEoAhIQCghjcml0aWNhbBgD",
                  "IAEoAhIQCghvdmVyaGVhbBgEIAEoAho6ChpDb21iYXRMb2dFbnRyeV9JbnRl",
                  "cnJ1cHRlZBIcChRpbnRlcnJ1cHRlZF9zcGVsbF9pZBgBIAEoAxrNAQoTQ29t",
                  "YmF0TG9nRW50cnlfQXVyYRJiCgVldmVudBgBIAEoDjJTLm1haW4uUHVibGlj",
                  "TWF0Y2hTdGF0ZS5Db21iYXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9BdXJh",
                  "LkNvbWJhdExvZ0VudHJ5X0F1cmFfRXZlbnQiUgoZQ29tYmF0TG9nRW50cnlf",
                  "QXVyYV9FdmVudBILCgdBcHBsaWVkEAASCwoHUmVtb3ZlZBABEg0KCVJlZnJl",
                  "c2hlZBACEgwKCERlcGxldGVkEAMa3gEKGUNvbWJhdExvZ0VudHJ5X0F1dG9h",
                  "dHRhY2sSaAoFZXZlbnQYASABKA4yWS5tYWluLlB1YmxpY01hdGNoU3RhdGUu",
                  "Q29tYmF0TG9nRW50cnkuQ29tYmF0TG9nRW50cnlfQXV0b2F0dGFjay5Db21i",
                  "YXRMb2dFbnRyeV9BdXRvYXR0YWNrEhYKDmZhaWxlZF9tZXNzYWdlGAIgASgJ",
                  "Ij8KGUNvbWJhdExvZ0VudHJ5X0F1dG9hdHRhY2sSCQoFU3RhcnQQABILCgdT",
                  "dWNjZXNzEAESCgoGRmFpbGVkEAIa0gEKE0NvbWJhdExvZ0VudHJ5X0Nhc3QS",
                  "YgoFZXZlbnQYASABKA4yUy5tYWluLlB1YmxpY01hdGNoU3RhdGUuQ29tYmF0",
                  "TG9nRW50cnkuQ29tYmF0TG9nRW50cnlfQ2FzdC5Db21iYXRMb2dFbnRyeV9B",
                  "dXJhX0V2ZW50EhYKDmZhaWxlZF9tZXNzYWdlGAIgASgJIj8KGUNvbWJhdExv",
                  "Z0VudHJ5X0F1cmFfRXZlbnQSCQoFU3RhcnQQABILCgdTdWNjZXNzEAESCgoG",
                  "RmFpbGVkEAIaLwocQ29tYmF0TG9nRW50cnlfU3lzdGVtTWVzc2FnZRIPCgdt",
                  "ZXNzYWdlGAEgASgJIlwKFUNvbWJhdExvZ0VudHJ5X1NvdXJjZRIOCgpBdXRv",
                  "YXR0YWNrEAASCQoFUmFuZ2UQARIJCgVTcGVsbBACEgwKCFBlcmlvZGljEAMS",
                  "DwoLRW52aXJvbm1lbnQQBCI8ChVDb21iYXRMb2dFbnRyeV9NaXNzZWQSCgoG",
                  "TWlzc2VkEAASCgoGRG9kZ2VkEAESCwoHUGFycmllZBACQhgKFnNvdXJjZV9z",
                  "cGVsbF9lZmZlY3RfaWRCBgoEdHlwZRq/AwoMSW50ZXJhY3RhYmxlEgoKAmlk",
                  "GAEgASgJEjYKBHR5cGUYAiABKA4yKC5tYWluLlB1YmxpY01hdGNoU3RhdGUu",
                  "SW50ZXJhY3RhYmxlLlR5cGUSFAoMY2hhcmFjdGVyX2lkGAMgASgDEiIKGmxh",
                  "c3RfcHJvY2Vzc2VkX2NsaWVudF90aWNrGAQgASgDEhEKCWNsYXNzbmFtZRgF",
                  "IAEoCRINCgVsZXZlbBgGIAEoBRIWCg5jdXJyZW50X2hlYWx0aBgHIAEoAhIV",
                  "Cg1jdXJyZW50X3Bvd2VyGAggASgCEhQKDGludnVsbmVyYWJsZRgJIAEoCBIy",
                  "Cghwb3NpdGlvbhgKIAEoCzIgLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5WZWN0",
                  "b3IyRGYSEAoIcm90YXRpb24YCyABKAISFwoPZ2xvYmFsX2Nvb2xkb3duGAwg",
                  "ASgCEg4KBnRhcmdldBgNIAEoCRIqCgVhdXJhcxgOIAMoCzIbLm1haW4uUHVi",
                  "bGljTWF0Y2hTdGF0ZS5BdXJhEhIKCmlzX2VuZ2FnZWQYDyABKAgiGwoEVHlw",
                  "ZRIKCgZQbGF5ZXIQABIHCgNOUEMQARpcCgRBdXJhEhcKD2NyZWF0ZWRfYXRf",
                  "dGljaxgBIAEoAxIPCgdjcmVhdG9yGAIgASgJEhEKCWVmZmVjdF9pZBgDIAEo",
                  "AxIXCg9hdXJhX3RpY2tfY291bnQYBCABKAUauQEKClByb2plY3RpbGUSCgoC",
                  "aWQYASABKAkSEAoIc3BlbGxfaWQYAiABKAMSFwoPY3JlYXRlZF9hdF90aWNr",
                  "GAMgASgDEg8KB2NyZWF0b3IYBCABKAkSMgoIcG9zaXRpb24YBSABKAsyIC5t",
                  "YWluLlB1YmxpY01hdGNoU3RhdGUuVmVjdG9yMkRmEhAKCHJvdGF0aW9uGAYg",
                  "ASgCEg4KBnRhcmdldBgHIAEoCRINCgVzcGVlZBgIIAEoAhohCglWZWN0b3Iy",
                  "RGYSCQoBeBgBIAEoAhIJCgF5GAIgASgCIuUGCg5DbGllbnRfTWVzc2FnZRIT",
                  "CgtjbGllbnRfdGljaxgBIAEoAxI6CgljaGFyYWN0ZXIYAiABKAsyJS5tYWlu",
                  "LkNsaWVudF9NZXNzYWdlLkNsaWVudF9DaGFyYWN0ZXJIABIwCgRjYXN0GAMg",
                  "ASgLMiAubWFpbi5DbGllbnRfTWVzc2FnZS5DbGllbnRfQ2FzdEgAEj0KC2F1",
                  "dG9fYXR0YWNrGAQgASgLMiYubWFpbi5DbGllbnRfTWVzc2FnZS5DbGllbnRf",
                  "QXV0b2F0dGFja0gAEkEKDWNhbmNlbF9hdHRhY2sYBSABKAsyKC5tYWluLkNs",
                  "aWVudF9NZXNzYWdlLkNsaWVudF9DYW5jZWxBdHRhY2tIABI0CgRtb3ZlGAYg",
                  "ASgLMiQubWFpbi5DbGllbnRfTWVzc2FnZS5DbGllbnRfTW92ZW1lbnRIABJC",
                  "CgtzZWxlY3RfY2hhchgHIAEoCzIrLm1haW4uQ2xpZW50X01lc3NhZ2UuQ2xp",
                  "ZW50X1NlbGVjdENoYXJhY3RlckgAGkYKEENsaWVudF9DaGFyYWN0ZXISIgoa",
                  "bGFzdF9jb25maXJtZWRfc2VydmVyX3RpY2sYAiABKAMSDgoGdGFyZ2V0GAMg",
                  "ASgJGjQKC0NsaWVudF9DYXN0EhMKC2NsaWVudF90aWNrGAEgASgDEhAKCHNw",
                  "ZWxsX2lkGAIgASgDGpEBChFDbGllbnRfQXV0b2F0dGFjaxITCgtjbGllbnRf",
                  "dGljaxgCIAEoAxI/CgphdHRhY2t0eXBlGAMgASgOMisubWFpbi5DbGllbnRf",
                  "TWVzc2FnZS5DbGllbnRfQXV0b2F0dGFjay5UeXBlIiYKBFR5cGUSCQoFTWVl",
                  "bGUQABIJCgVSYW5nZRABEggKBFdhbmQQAhoVChNDbGllbnRfQ2FuY2VsQXR0",
                  "YWNrGnYKD0NsaWVudF9Nb3ZlbWVudBITCgtjbGllbnRfdGljaxgBIAEoAxIc",
                  "ChRhYnNvbHV0ZV9jb29yZGluYXRlcxgCIAEoCBIOCgZ4X2F4aXMYAyABKAIS",
                  "DgoGeV9heGlzGAQgASgCEhAKCHJvdGF0aW9uGAUgASgCGisKFkNsaWVudF9T",
                  "ZWxlY3RDaGFyYWN0ZXISEQoJY2xhc3NuYW1lGAEgASgJQgYKBHR5cGVCJaoC",
                  "Ik5ha2FtYU1pbmltYWxHYW1lLlB1YmxpY01hdGNoU3RhdGViBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Parser, new[]{ "Tick", "Combatlog", "Interactable", "Projectile" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Parser, new[]{ "Timestamp", "SourceId", "DestinationId", "Source", "SourceSpellId", "SourceEffectId", "Damage", "MissedType", "Interrupted", "Aura", "Cast", "SystemMessage" }, new[]{ "SourceSpellEffectId", "Type" }, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source), typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Missed) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage.Parser, new[]{ "Amount", "Resisted", "Blocked", "Absorbed", "Critical", "Overkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Heal), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Heal.Parser, new[]{ "Amount", "Absorbed", "Critical", "Overheal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted.Parser, new[]{ "InterruptedSpellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Parser, new[]{ "Event" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack.Parser, new[]{ "Event", "FailedMessage" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack.Types.CombatLogEntry_Autoattack) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Parser, new[]{ "Event", "FailedMessage" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_SystemMessage), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_SystemMessage.Parser, new[]{ "Message" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser, new[]{ "Id", "Type", "CharacterId", "LastProcessedClientTick", "Classname", "Level", "CurrentHealth", "CurrentPower", "Invulnerable", "Position", "Rotation", "GlobalCooldown", "Target", "Auras", "IsEngaged" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura.Parser, new[]{ "CreatedAtTick", "Creator", "EffectId", "AuraTickCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser, new[]{ "Id", "SpellId", "CreatedAtTick", "Creator", "Position", "Rotation", "Target", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df.Parser, new[]{ "X", "Y" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message), global::NakamaMinimalGame.PublicMatchState.Client_Message.Parser, new[]{ "ClientTick", "Character", "Cast", "AutoAttack", "CancelAttack", "Move", "SelectChar" }, new[]{ "Type" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character.Parser, new[]{ "LastConfirmedServerTick", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast.Parser, new[]{ "ClientTick", "SpellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack.Parser, new[]{ "ClientTick", "Attacktype" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement.Parser, new[]{ "ClientTick", "AbsoluteCoordinates", "XAxis", "YAxis", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter), global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter.Parser, new[]{ "Classname" }, null, null, null)})
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class PublicMatchState : pb::IMessage<PublicMatchState>
    {
        private static readonly pb::MessageParser<PublicMatchState> _parser = new pb::MessageParser<PublicMatchState>(() => new PublicMatchState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PublicMatchState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState(PublicMatchState other) : this()
        {
            tick_ = other.tick_;
            combatlog_ = other.combatlog_.Clone();
            interactable_ = other.interactable_.Clone();
            projectile_ = other.projectile_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState Clone()
        {
            return new PublicMatchState(this);
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 1;
        private long tick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Tick
        {
            get { return tick_; }
            set
            {
                tick_ = value;
            }
        }

        /// <summary>Field number for the "combatlog" field.</summary>
        public const int CombatlogFieldNumber = 2;
        private static readonly pb::FieldCodec<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> _repeated_combatlog_codec
            = pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Parser);
        private readonly pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> combatlog_ = new pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry>();
        /// <summary>
        ///repeated int64 stopwatch = 2;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> Combatlog
        {
            get { return combatlog_; }
        }

        /// <summary>Field number for the "interactable" field.</summary>
        public const int InteractableFieldNumber = 3;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec _map_interactable_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser), 26);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> interactable_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> Interactable
        {
            get { return interactable_; }
        }

        /// <summary>Field number for the "projectile" field.</summary>
        public const int ProjectileFieldNumber = 4;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec _map_projectile_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser), 34);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> projectile_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> Projectile
        {
            get { return projectile_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PublicMatchState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PublicMatchState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Tick != other.Tick) return false;
            if (!combatlog_.Equals(other.combatlog_)) return false;
            if (!Interactable.Equals(other.Interactable)) return false;
            if (!Projectile.Equals(other.Projectile)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Tick != 0L) hash ^= Tick.GetHashCode();
            hash ^= combatlog_.GetHashCode();
            hash ^= Interactable.GetHashCode();
            hash ^= Projectile.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Tick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Tick);
            }
            combatlog_.WriteTo(output, _repeated_combatlog_codec);
            interactable_.WriteTo(output, _map_interactable_codec);
            projectile_.WriteTo(output, _map_projectile_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Tick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
            }
            size += combatlog_.CalculateSize(_repeated_combatlog_codec);
            size += interactable_.CalculateSize(_map_interactable_codec);
            size += projectile_.CalculateSize(_map_projectile_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PublicMatchState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Tick != 0L)
            {
                Tick = other.Tick;
            }
            combatlog_.Add(other.combatlog_);
            interactable_.Add(other.interactable_);
            projectile_.Add(other.projectile_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Tick = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            combatlog_.AddEntriesFrom(input, _repeated_combatlog_codec);
                            break;
                        }
                    case 26:
                        {
                            interactable_.AddEntriesFrom(input, _map_interactable_codec);
                            break;
                        }
                    case 34:
                        {
                            projectile_.AddEntriesFrom(input, _map_projectile_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PublicMatchState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            ///https://wow.gamepedia.com/COMBAT_LOG_EVENT_UNFILTERED
            /// </summary>
            public sealed partial class CombatLogEntry : pb::IMessage<CombatLogEntry>
            {
                private static readonly pb::MessageParser<CombatLogEntry> _parser = new pb::MessageParser<CombatLogEntry>(() => new CombatLogEntry());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CombatLogEntry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry(CombatLogEntry other) : this()
                {
                    timestamp_ = other.timestamp_;
                    sourceId_ = other.sourceId_;
                    destinationId_ = other.destinationId_;
                    source_ = other.source_;
                    switch (other.SourceSpellEffectIdCase)
                    {
                        case SourceSpellEffectIdOneofCase.SourceSpellId:
                            SourceSpellId = other.SourceSpellId;
                            break;
                        case SourceSpellEffectIdOneofCase.SourceEffectId:
                            SourceEffectId = other.SourceEffectId;
                            break;
                    }

                    switch (other.TypeCase)
                    {
                        case TypeOneofCase.Damage:
                            Damage = other.Damage.Clone();
                            break;
                        case TypeOneofCase.MissedType:
                            MissedType = other.MissedType;
                            break;
                        case TypeOneofCase.Interrupted:
                            Interrupted = other.Interrupted.Clone();
                            break;
                        case TypeOneofCase.Aura:
                            Aura = other.Aura.Clone();
                            break;
                        case TypeOneofCase.Cast:
                            Cast = other.Cast.Clone();
                            break;
                        case TypeOneofCase.SystemMessage:
                            SystemMessage = other.SystemMessage;
                            break;
                    }

                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry Clone()
                {
                    return new CombatLogEntry(this);
                }

                /// <summary>Field number for the "timestamp" field.</summary>
                public const int TimestampFieldNumber = 1;
                private long timestamp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Timestamp
                {
                    get { return timestamp_; }
                    set
                    {
                        timestamp_ = value;
                    }
                }

                /// <summary>Field number for the "source_id" field.</summary>
                public const int SourceIdFieldNumber = 2;
                private string sourceId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SourceId
                {
                    get { return sourceId_; }
                    set
                    {
                        sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "destination_id" field.</summary>
                public const int DestinationIdFieldNumber = 3;
                private string destinationId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string DestinationId
                {
                    get { return destinationId_; }
                    set
                    {
                        destinationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "source" field.</summary>
                public const int SourceFieldNumber = 4;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source source_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source Source
                {
                    get { return source_; }
                    set
                    {
                        source_ = value;
                    }
                }

                /// <summary>Field number for the "source_spell_id" field.</summary>
                public const int SourceSpellIdFieldNumber = 5;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SourceSpellId
                {
                    get { return sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId ? (long)sourceSpellEffectId_ : 0L; }
                    set
                    {
                        sourceSpellEffectId_ = value;
                        sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.SourceSpellId;
                    }
                }

                /// <summary>Field number for the "source_effect_id" field.</summary>
                public const int SourceEffectIdFieldNumber = 6;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SourceEffectId
                {
                    get { return sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId ? (long)sourceSpellEffectId_ : 0L; }
                    set
                    {
                        sourceSpellEffectId_ = value;
                        sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.SourceEffectId;
                    }
                }

                /// <summary>Field number for the "damage" field.</summary>
                public const int DamageFieldNumber = 7;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage Damage
                {
                    get { return typeCase_ == TypeOneofCase.Damage ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Damage;
                    }
                }

                /// <summary>Field number for the "missed_type" field.</summary>
                public const int MissedTypeFieldNumber = 8;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Missed MissedType
                {
                    get { return typeCase_ == TypeOneofCase.MissedType ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Missed)type_ : 0; }
                    set
                    {
                        type_ = value;
                        typeCase_ = TypeOneofCase.MissedType;
                    }
                }

                /// <summary>Field number for the "interrupted" field.</summary>
                public const int InterruptedFieldNumber = 9;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted Interrupted
                {
                    get { return typeCase_ == TypeOneofCase.Interrupted ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Interrupted;
                    }
                }

                /// <summary>Field number for the "aura" field.</summary>
                public const int AuraFieldNumber = 10;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura Aura
                {
                    get { return typeCase_ == TypeOneofCase.Aura ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Aura;
                    }
                }

                /// <summary>Field number for the "cast" field.</summary>
                public const int CastFieldNumber = 11;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast Cast
                {
                    get { return typeCase_ == TypeOneofCase.Cast ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Cast;
                    }
                }

                /// <summary>Field number for the "system_message" field.</summary>
                public const int SystemMessageFieldNumber = 12;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SystemMessage
                {
                    get { return typeCase_ == TypeOneofCase.SystemMessage ? (string)type_ : ""; }
                    set
                    {
                        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        typeCase_ = TypeOneofCase.SystemMessage;
                    }
                }

                private object sourceSpellEffectId_;
                /// <summary>Enum of possible cases for the "source_spell_effect_id" oneof.</summary>
                public enum SourceSpellEffectIdOneofCase
                {
                    None = 0,
                    SourceSpellId = 5,
                    SourceEffectId = 6,
                }
                private SourceSpellEffectIdOneofCase sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SourceSpellEffectIdOneofCase SourceSpellEffectIdCase
                {
                    get { return sourceSpellEffectIdCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSourceSpellEffectId()
                {
                    sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.None;
                    sourceSpellEffectId_ = null;
                }

                private object type_;
                /// <summary>Enum of possible cases for the "type" oneof.</summary>
                public enum TypeOneofCase
                {
                    None = 0,
                    Damage = 7,
                    MissedType = 8,
                    Interrupted = 9,
                    Aura = 10,
                    Cast = 11,
                    SystemMessage = 12,
                }
                private TypeOneofCase typeCase_ = TypeOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TypeOneofCase TypeCase
                {
                    get { return typeCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearType()
                {
                    typeCase_ = TypeOneofCase.None;
                    type_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as CombatLogEntry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CombatLogEntry other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Timestamp != other.Timestamp) return false;
                    if (SourceId != other.SourceId) return false;
                    if (DestinationId != other.DestinationId) return false;
                    if (Source != other.Source) return false;
                    if (SourceSpellId != other.SourceSpellId) return false;
                    if (SourceEffectId != other.SourceEffectId) return false;
                    if (!object.Equals(Damage, other.Damage)) return false;
                    if (MissedType != other.MissedType) return false;
                    if (!object.Equals(Interrupted, other.Interrupted)) return false;
                    if (!object.Equals(Aura, other.Aura)) return false;
                    if (!object.Equals(Cast, other.Cast)) return false;
                    if (SystemMessage != other.SystemMessage) return false;
                    if (SourceSpellEffectIdCase != other.SourceSpellEffectIdCase) return false;
                    if (TypeCase != other.TypeCase) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
                    if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
                    if (DestinationId.Length != 0) hash ^= DestinationId.GetHashCode();
                    if (Source != 0) hash ^= Source.GetHashCode();
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId) hash ^= SourceSpellId.GetHashCode();
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId) hash ^= SourceEffectId.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Damage) hash ^= Damage.GetHashCode();
                    if (typeCase_ == TypeOneofCase.MissedType) hash ^= MissedType.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Interrupted) hash ^= Interrupted.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Aura) hash ^= Aura.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Cast) hash ^= Cast.GetHashCode();
                    if (typeCase_ == TypeOneofCase.SystemMessage) hash ^= SystemMessage.GetHashCode();
                    hash ^= (int)sourceSpellEffectIdCase_;
                    hash ^= (int)typeCase_;
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Timestamp != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(Timestamp);
                    }
                    if (SourceId.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(SourceId);
                    }
                    if (DestinationId.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(DestinationId);
                    }
                    if (Source != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteEnum((int)Source);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId)
                    {
                        output.WriteRawTag(40);
                        output.WriteInt64(SourceSpellId);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId)
                    {
                        output.WriteRawTag(48);
                        output.WriteInt64(SourceEffectId);
                    }
                    if (typeCase_ == TypeOneofCase.Damage)
                    {
                        output.WriteRawTag(58);
                        output.WriteMessage(Damage);
                    }
                    if (typeCase_ == TypeOneofCase.MissedType)
                    {
                        output.WriteRawTag(64);
                        output.WriteEnum((int)MissedType);
                    }
                    if (typeCase_ == TypeOneofCase.Interrupted)
                    {
                        output.WriteRawTag(74);
                        output.WriteMessage(Interrupted);
                    }
                    if (typeCase_ == TypeOneofCase.Aura)
                    {
                        output.WriteRawTag(82);
                        output.WriteMessage(Aura);
                    }
                    if (typeCase_ == TypeOneofCase.Cast)
                    {
                        output.WriteRawTag(90);
                        output.WriteMessage(Cast);
                    }
                    if (typeCase_ == TypeOneofCase.SystemMessage)
                    {
                        output.WriteRawTag(98);
                        output.WriteString(SystemMessage);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Timestamp != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
                    }
                    if (SourceId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
                    }
                    if (DestinationId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationId);
                    }
                    if (Source != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Source);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceSpellId);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceEffectId);
                    }
                    if (typeCase_ == TypeOneofCase.Damage)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damage);
                    }
                    if (typeCase_ == TypeOneofCase.MissedType)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)MissedType);
                    }
                    if (typeCase_ == TypeOneofCase.Interrupted)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interrupted);
                    }
                    if (typeCase_ == TypeOneofCase.Aura)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aura);
                    }
                    if (typeCase_ == TypeOneofCase.Cast)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cast);
                    }
                    if (typeCase_ == TypeOneofCase.SystemMessage)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemMessage);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CombatLogEntry other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Timestamp != 0L)
                    {
                        Timestamp = other.Timestamp;
                    }
                    if (other.SourceId.Length != 0)
                    {
                        SourceId = other.SourceId;
                    }
                    if (other.DestinationId.Length != 0)
                    {
                        DestinationId = other.DestinationId;
                    }
                    if (other.Source != 0)
                    {
                        Source = other.Source;
                    }
                    switch (other.SourceSpellEffectIdCase)
                    {
                        case SourceSpellEffectIdOneofCase.SourceSpellId:
                            SourceSpellId = other.SourceSpellId;
                            break;
                        case SourceSpellEffectIdOneofCase.SourceEffectId:
                            SourceEffectId = other.SourceEffectId;
                            break;
                    }

                    switch (other.TypeCase)
                    {
                        case TypeOneofCase.Damage:
                            if (Damage == null)
                            {
                                Damage = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage();
                            }
                            Damage.MergeFrom(other.Damage);
                            break;
                        case TypeOneofCase.MissedType:
                            MissedType = other.MissedType;
                            break;
                        case TypeOneofCase.Interrupted:
                            if (Interrupted == null)
                            {
                                Interrupted = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted();
                            }
                            Interrupted.MergeFrom(other.Interrupted);
                            break;
                        case TypeOneofCase.Aura:
                            if (Aura == null)
                            {
                                Aura = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura();
                            }
                            Aura.MergeFrom(other.Aura);
                            break;
                        case TypeOneofCase.Cast:
                            if (Cast == null)
                            {
                                Cast = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast();
                            }
                            Cast.MergeFrom(other.Cast);
                            break;
                        case TypeOneofCase.SystemMessage:
                            SystemMessage = other.SystemMessage;
                            break;
                    }

                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    Timestamp = input.ReadInt64();
                                    break;
                                }
                            case 18:
                                {
                                    SourceId = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    DestinationId = input.ReadString();
                                    break;
                                }
                            case 32:
                                {
                                    Source = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source)input.ReadEnum();
                                    break;
                                }
                            case 40:
                                {
                                    SourceSpellId = input.ReadInt64();
                                    break;
                                }
                            case 48:
                                {
                                    SourceEffectId = input.ReadInt64();
                                    break;
                                }
                            case 58:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage();
                                    if (typeCase_ == TypeOneofCase.Damage)
                                    {
                                        subBuilder.MergeFrom(Damage);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Damage = subBuilder;
                                    break;
                                }
                            case 64:
                                {
                                    type_ = input.ReadEnum();
                                    typeCase_ = TypeOneofCase.MissedType;
                                    break;
                                }
                            case 74:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted();
                                    if (typeCase_ == TypeOneofCase.Interrupted)
                                    {
                                        subBuilder.MergeFrom(Interrupted);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Interrupted = subBuilder;
                                    break;
                                }
                            case 82:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura();
                                    if (typeCase_ == TypeOneofCase.Aura)
                                    {
                                        subBuilder.MergeFrom(Aura);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Aura = subBuilder;
                                    break;
                                }
                            case 90:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast();
                                    if (typeCase_ == TypeOneofCase.Cast)
                                    {
                                        subBuilder.MergeFrom(Cast);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Cast = subBuilder;
                                    break;
                                }
                            case 98:
                                {
                                    SystemMessage = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the CombatLogEntry message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum CombatLogEntry_Source
                    {
                        [pbr::OriginalName("Autoattack")] Autoattack = 0,
                        [pbr::OriginalName("Range")] Range = 1,
                        [pbr::OriginalName("Spell")] Spell = 2,
                        [pbr::OriginalName("Periodic")] Periodic = 3,
                        [pbr::OriginalName("Environment")] Environment = 4,
                    }

                    public enum CombatLogEntry_Missed
                    {
                        [pbr::OriginalName("Missed")] Missed = 0,
                        [pbr::OriginalName("Dodged")] Dodged = 1,
                        [pbr::OriginalName("Parried")] Parried = 2,
                    }

                    public sealed partial class CombatLogEntry_Damage : pb::IMessage<CombatLogEntry_Damage>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Damage> _parser = new pb::MessageParser<CombatLogEntry_Damage>(() => new CombatLogEntry_Damage());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Damage> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage(CombatLogEntry_Damage other) : this()
                        {
                            amount_ = other.amount_;
                            resisted_ = other.resisted_;
                            blocked_ = other.blocked_;
                            absorbed_ = other.absorbed_;
                            critical_ = other.critical_;
                            overkill_ = other.overkill_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage Clone()
                        {
                            return new CombatLogEntry_Damage(this);
                        }

                        /// <summary>Field number for the "amount" field.</summary>
                        public const int AmountFieldNumber = 1;
                        private float amount_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Amount
                        {
                            get { return amount_; }
                            set
                            {
                                amount_ = value;
                            }
                        }

                        /// <summary>Field number for the "resisted" field.</summary>
                        public const int ResistedFieldNumber = 2;
                        private float resisted_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Resisted
                        {
                            get { return resisted_; }
                            set
                            {
                                resisted_ = value;
                            }
                        }

                        /// <summary>Field number for the "blocked" field.</summary>
                        public const int BlockedFieldNumber = 3;
                        private float blocked_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Blocked
                        {
                            get { return blocked_; }
                            set
                            {
                                blocked_ = value;
                            }
                        }

                        /// <summary>Field number for the "absorbed" field.</summary>
                        public const int AbsorbedFieldNumber = 4;
                        private float absorbed_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Absorbed
                        {
                            get { return absorbed_; }
                            set
                            {
                                absorbed_ = value;
                            }
                        }

                        /// <summary>Field number for the "critical" field.</summary>
                        public const int CriticalFieldNumber = 5;
                        private float critical_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Critical
                        {
                            get { return critical_; }
                            set
                            {
                                critical_ = value;
                            }
                        }

                        /// <summary>Field number for the "overkill" field.</summary>
                        public const int OverkillFieldNumber = 6;
                        private float overkill_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Overkill
                        {
                            get { return overkill_; }
                            set
                            {
                                overkill_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Damage);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Damage other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Resisted, other.Resisted)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Blocked, other.Blocked)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Absorbed, other.Absorbed)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Critical, other.Critical)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Overkill, other.Overkill)) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
                            if (Resisted != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Resisted);
                            if (Blocked != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Blocked);
                            if (Absorbed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Absorbed);
                            if (Critical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Critical);
                            if (Overkill != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Overkill);
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Amount != 0F)
                            {
                                output.WriteRawTag(13);
                                output.WriteFloat(Amount);
                            }
                            if (Resisted != 0F)
                            {
                                output.WriteRawTag(21);
                                output.WriteFloat(Resisted);
                            }
                            if (Blocked != 0F)
                            {
                                output.WriteRawTag(29);
                                output.WriteFloat(Blocked);
                            }
                            if (Absorbed != 0F)
                            {
                                output.WriteRawTag(37);
                                output.WriteFloat(Absorbed);
                            }
                            if (Critical != 0F)
                            {
                                output.WriteRawTag(45);
                                output.WriteFloat(Critical);
                            }
                            if (Overkill != 0F)
                            {
                                output.WriteRawTag(53);
                                output.WriteFloat(Overkill);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Amount != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Resisted != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Blocked != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Absorbed != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Critical != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Overkill != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Damage other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Amount != 0F)
                            {
                                Amount = other.Amount;
                            }
                            if (other.Resisted != 0F)
                            {
                                Resisted = other.Resisted;
                            }
                            if (other.Blocked != 0F)
                            {
                                Blocked = other.Blocked;
                            }
                            if (other.Absorbed != 0F)
                            {
                                Absorbed = other.Absorbed;
                            }
                            if (other.Critical != 0F)
                            {
                                Critical = other.Critical;
                            }
                            if (other.Overkill != 0F)
                            {
                                Overkill = other.Overkill;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 13:
                                        {
                                            Amount = input.ReadFloat();
                                            break;
                                        }
                                    case 21:
                                        {
                                            Resisted = input.ReadFloat();
                                            break;
                                        }
                                    case 29:
                                        {
                                            Blocked = input.ReadFloat();
                                            break;
                                        }
                                    case 37:
                                        {
                                            Absorbed = input.ReadFloat();
                                            break;
                                        }
                                    case 45:
                                        {
                                            Critical = input.ReadFloat();
                                            break;
                                        }
                                    case 53:
                                        {
                                            Overkill = input.ReadFloat();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Heal : pb::IMessage<CombatLogEntry_Heal>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Heal> _parser = new pb::MessageParser<CombatLogEntry_Heal>(() => new CombatLogEntry_Heal());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Heal> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[1]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal(CombatLogEntry_Heal other) : this()
                        {
                            amount_ = other.amount_;
                            absorbed_ = other.absorbed_;
                            critical_ = other.critical_;
                            overheal_ = other.overheal_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal Clone()
                        {
                            return new CombatLogEntry_Heal(this);
                        }

                        /// <summary>Field number for the "amount" field.</summary>
                        public const int AmountFieldNumber = 1;
                        private float amount_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Amount
                        {
                            get { return amount_; }
                            set
                            {
                                amount_ = value;
                            }
                        }

                        /// <summary>Field number for the "absorbed" field.</summary>
                        public const int AbsorbedFieldNumber = 2;
                        private float absorbed_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Absorbed
                        {
                            get { return absorbed_; }
                            set
                            {
                                absorbed_ = value;
                            }
                        }

                        /// <summary>Field number for the "critical" field.</summary>
                        public const int CriticalFieldNumber = 3;
                        private float critical_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Critical
                        {
                            get { return critical_; }
                            set
                            {
                                critical_ = value;
                            }
                        }

                        /// <summary>Field number for the "overheal" field.</summary>
                        public const int OverhealFieldNumber = 4;
                        private float overheal_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Overheal
                        {
                            get { return overheal_; }
                            set
                            {
                                overheal_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Heal);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Heal other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Absorbed, other.Absorbed)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Critical, other.Critical)) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Overheal, other.Overheal)) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
                            if (Absorbed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Absorbed);
                            if (Critical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Critical);
                            if (Overheal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Overheal);
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Amount != 0F)
                            {
                                output.WriteRawTag(13);
                                output.WriteFloat(Amount);
                            }
                            if (Absorbed != 0F)
                            {
                                output.WriteRawTag(21);
                                output.WriteFloat(Absorbed);
                            }
                            if (Critical != 0F)
                            {
                                output.WriteRawTag(29);
                                output.WriteFloat(Critical);
                            }
                            if (Overheal != 0F)
                            {
                                output.WriteRawTag(37);
                                output.WriteFloat(Overheal);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Amount != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Absorbed != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Critical != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (Overheal != 0F)
                            {
                                size += 1 + 4;
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Heal other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Amount != 0F)
                            {
                                Amount = other.Amount;
                            }
                            if (other.Absorbed != 0F)
                            {
                                Absorbed = other.Absorbed;
                            }
                            if (other.Critical != 0F)
                            {
                                Critical = other.Critical;
                            }
                            if (other.Overheal != 0F)
                            {
                                Overheal = other.Overheal;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 13:
                                        {
                                            Amount = input.ReadFloat();
                                            break;
                                        }
                                    case 21:
                                        {
                                            Absorbed = input.ReadFloat();
                                            break;
                                        }
                                    case 29:
                                        {
                                            Critical = input.ReadFloat();
                                            break;
                                        }
                                    case 37:
                                        {
                                            Overheal = input.ReadFloat();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Interrupted : pb::IMessage<CombatLogEntry_Interrupted>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Interrupted> _parser = new pb::MessageParser<CombatLogEntry_Interrupted>(() => new CombatLogEntry_Interrupted());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Interrupted> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[2]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted(CombatLogEntry_Interrupted other) : this()
                        {
                            interruptedSpellId_ = other.interruptedSpellId_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted Clone()
                        {
                            return new CombatLogEntry_Interrupted(this);
                        }

                        /// <summary>Field number for the "interrupted_spell_id" field.</summary>
                        public const int InterruptedSpellIdFieldNumber = 1;
                        private long interruptedSpellId_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public long InterruptedSpellId
                        {
                            get { return interruptedSpellId_; }
                            set
                            {
                                interruptedSpellId_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Interrupted);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Interrupted other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (InterruptedSpellId != other.InterruptedSpellId) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (InterruptedSpellId != 0L) hash ^= InterruptedSpellId.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (InterruptedSpellId != 0L)
                            {
                                output.WriteRawTag(8);
                                output.WriteInt64(InterruptedSpellId);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (InterruptedSpellId != 0L)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt64Size(InterruptedSpellId);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Interrupted other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.InterruptedSpellId != 0L)
                            {
                                InterruptedSpellId = other.InterruptedSpellId;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 8:
                                        {
                                            InterruptedSpellId = input.ReadInt64();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Aura : pb::IMessage<CombatLogEntry_Aura>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Aura> _parser = new pb::MessageParser<CombatLogEntry_Aura>(() => new CombatLogEntry_Aura());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Aura> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[3]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura(CombatLogEntry_Aura other) : this()
                        {
                            event_ = other.event_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura Clone()
                        {
                            return new CombatLogEntry_Aura(this);
                        }

                        /// <summary>Field number for the "event" field.</summary>
                        public const int EventFieldNumber = 1;
                        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event event_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event Event
                        {
                            get { return event_; }
                            set
                            {
                                event_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Aura);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Aura other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Event != other.Event) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Event != 0) hash ^= Event.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Event != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteEnum((int)Event);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Event != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Aura other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Event != 0)
                            {
                                Event = other.Event;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 8:
                                        {
                                            Event = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event)input.ReadEnum();
                                            break;
                                        }
                                }
                            }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatLogEntry_Aura message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types
                        {
                            public enum CombatLogEntry_Aura_Event
                            {
                                [pbr::OriginalName("Applied")] Applied = 0,
                                [pbr::OriginalName("Removed")] Removed = 1,
                                [pbr::OriginalName("Refreshed")] Refreshed = 2,
                                [pbr::OriginalName("Depleted")] Depleted = 3,
                            }

                        }
                        #endregion

                    }

                    public sealed partial class CombatLogEntry_Autoattack : pb::IMessage<CombatLogEntry_Autoattack>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Autoattack> _parser = new pb::MessageParser<CombatLogEntry_Autoattack>(() => new CombatLogEntry_Autoattack());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Autoattack> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[4]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Autoattack()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Autoattack(CombatLogEntry_Autoattack other) : this()
                        {
                            event_ = other.event_;
                            failedMessage_ = other.failedMessage_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Autoattack Clone()
                        {
                            return new CombatLogEntry_Autoattack(this);
                        }

                        /// <summary>Field number for the "event" field.</summary>
                        public const int EventFieldNumber = 1;
                        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack.Types.CombatLogEntry_Autoattack event_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack.Types.CombatLogEntry_Autoattack Event
                        {
                            get { return event_; }
                            set
                            {
                                event_ = value;
                            }
                        }

                        /// <summary>Field number for the "failed_message" field.</summary>
                        public const int FailedMessageFieldNumber = 2;
                        private string failedMessage_ = "";
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string FailedMessage
                        {
                            get { return failedMessage_; }
                            set
                            {
                                failedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Autoattack);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Autoattack other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Event != other.Event) return false;
                            if (FailedMessage != other.FailedMessage) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Event != 0) hash ^= Event.GetHashCode();
                            if (FailedMessage.Length != 0) hash ^= FailedMessage.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Event != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteEnum((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                output.WriteRawTag(18);
                                output.WriteString(FailedMessage);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Event != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(FailedMessage);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Autoattack other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Event != 0)
                            {
                                Event = other.Event;
                            }
                            if (other.FailedMessage.Length != 0)
                            {
                                FailedMessage = other.FailedMessage;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 8:
                                        {
                                            Event = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Autoattack.Types.CombatLogEntry_Autoattack)input.ReadEnum();
                                            break;
                                        }
                                    case 18:
                                        {
                                            FailedMessage = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatLogEntry_Autoattack message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types
                        {
                            public enum CombatLogEntry_Autoattack
                            {
                                [pbr::OriginalName("Start")] Start = 0,
                                [pbr::OriginalName("Success")] Success = 1,
                                [pbr::OriginalName("Failed")] Failed = 2,
                            }

                        }
                        #endregion

                    }

                    public sealed partial class CombatLogEntry_Cast : pb::IMessage<CombatLogEntry_Cast>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Cast> _parser = new pb::MessageParser<CombatLogEntry_Cast>(() => new CombatLogEntry_Cast());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Cast> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[5]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast(CombatLogEntry_Cast other) : this()
                        {
                            event_ = other.event_;
                            failedMessage_ = other.failedMessage_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast Clone()
                        {
                            return new CombatLogEntry_Cast(this);
                        }

                        /// <summary>Field number for the "event" field.</summary>
                        public const int EventFieldNumber = 1;
                        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event event_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event Event
                        {
                            get { return event_; }
                            set
                            {
                                event_ = value;
                            }
                        }

                        /// <summary>Field number for the "failed_message" field.</summary>
                        public const int FailedMessageFieldNumber = 2;
                        private string failedMessage_ = "";
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string FailedMessage
                        {
                            get { return failedMessage_; }
                            set
                            {
                                failedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Cast);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Cast other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Event != other.Event) return false;
                            if (FailedMessage != other.FailedMessage) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Event != 0) hash ^= Event.GetHashCode();
                            if (FailedMessage.Length != 0) hash ^= FailedMessage.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Event != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteEnum((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                output.WriteRawTag(18);
                                output.WriteString(FailedMessage);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Event != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(FailedMessage);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Cast other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Event != 0)
                            {
                                Event = other.Event;
                            }
                            if (other.FailedMessage.Length != 0)
                            {
                                FailedMessage = other.FailedMessage;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 8:
                                        {
                                            Event = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event)input.ReadEnum();
                                            break;
                                        }
                                    case 18:
                                        {
                                            FailedMessage = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatLogEntry_Cast message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types
                        {
                            public enum CombatLogEntry_Aura_Event
                            {
                                [pbr::OriginalName("Start")] Start = 0,
                                [pbr::OriginalName("Success")] Success = 1,
                                [pbr::OriginalName("Failed")] Failed = 2,
                            }

                        }
                        #endregion

                    }

                    public sealed partial class CombatLogEntry_SystemMessage : pb::IMessage<CombatLogEntry_SystemMessage>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_SystemMessage> _parser = new pb::MessageParser<CombatLogEntry_SystemMessage>(() => new CombatLogEntry_SystemMessage());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_SystemMessage> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[6]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage(CombatLogEntry_SystemMessage other) : this()
                        {
                            message_ = other.message_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage Clone()
                        {
                            return new CombatLogEntry_SystemMessage(this);
                        }

                        /// <summary>Field number for the "message" field.</summary>
                        public const int MessageFieldNumber = 1;
                        private string message_ = "";
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Message
                        {
                            get { return message_; }
                            set
                            {
                                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_SystemMessage);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_SystemMessage other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Message != other.Message) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Message.Length != 0) hash ^= Message.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Message.Length != 0)
                            {
                                output.WriteRawTag(10);
                                output.WriteString(Message);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Message.Length != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_SystemMessage other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Message.Length != 0)
                            {
                                Message = other.Message;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 10:
                                        {
                                            Message = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                }
                #endregion

            }

            public sealed partial class Interactable : pb::IMessage<Interactable>
            {
                private static readonly pb::MessageParser<Interactable> _parser = new pb::MessageParser<Interactable>(() => new Interactable());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Interactable> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable(Interactable other) : this()
                {
                    id_ = other.id_;
                    type_ = other.type_;
                    characterId_ = other.characterId_;
                    lastProcessedClientTick_ = other.lastProcessedClientTick_;
                    classname_ = other.classname_;
                    level_ = other.level_;
                    currentHealth_ = other.currentHealth_;
                    currentPower_ = other.currentPower_;
                    invulnerable_ = other.invulnerable_;
                    position_ = other.position_ != null ? other.position_.Clone() : null;
                    rotation_ = other.rotation_;
                    globalCooldown_ = other.globalCooldown_;
                    target_ = other.target_;
                    auras_ = other.auras_.Clone();
                    isEngaged_ = other.isEngaged_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable Clone()
                {
                    return new Interactable(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                ///system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 2;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type type_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type Type
                {
                    get { return type_; }
                    set
                    {
                        type_ = value;
                    }
                }

                /// <summary>Field number for the "character_id" field.</summary>
                public const int CharacterIdFieldNumber = 3;
                private long characterId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CharacterId
                {
                    get { return characterId_; }
                    set
                    {
                        characterId_ = value;
                    }
                }

                /// <summary>Field number for the "last_processed_client_tick" field.</summary>
                public const int LastProcessedClientTickFieldNumber = 4;
                private long lastProcessedClientTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long LastProcessedClientTick
                {
                    get { return lastProcessedClientTick_; }
                    set
                    {
                        lastProcessedClientTick_ = value;
                    }
                }

                /// <summary>Field number for the "classname" field.</summary>
                public const int ClassnameFieldNumber = 5;
                private string classname_ = "";
                /// <summary>
                ///info
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Classname
                {
                    get { return classname_; }
                    set
                    {
                        classname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "level" field.</summary>
                public const int LevelFieldNumber = 6;
                private int level_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Level
                {
                    get { return level_; }
                    set
                    {
                        level_ = value;
                    }
                }

                /// <summary>Field number for the "current_health" field.</summary>
                public const int CurrentHealthFieldNumber = 7;
                private float currentHealth_;
                /// <summary>
                ///stats
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float CurrentHealth
                {
                    get { return currentHealth_; }
                    set
                    {
                        currentHealth_ = value;
                    }
                }

                /// <summary>Field number for the "current_power" field.</summary>
                public const int CurrentPowerFieldNumber = 8;
                private float currentPower_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float CurrentPower
                {
                    get { return currentPower_; }
                    set
                    {
                        currentPower_ = value;
                    }
                }

                /// <summary>Field number for the "invulnerable" field.</summary>
                public const int InvulnerableFieldNumber = 9;
                private bool invulnerable_;
                /// <summary>
                ///vitalities
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Invulnerable
                {
                    get { return invulnerable_; }
                    set
                    {
                        invulnerable_ = value;
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 10;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                /// <summary>
                ///pos
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 11;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "global_cooldown" field.</summary>
                public const int GlobalCooldownFieldNumber = 12;
                private float globalCooldown_;
                /// <summary>
                ///combat
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float GlobalCooldown
                {
                    get { return globalCooldown_; }
                    set
                    {
                        globalCooldown_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 13;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "auras" field.</summary>
                public const int AurasFieldNumber = 14;
                private static readonly pb::FieldCodec<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> _repeated_auras_codec
                    = pb::FieldCodec.ForMessage(114, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura.Parser);
                private readonly pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> auras_ = new pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura>();
                /// <summary>
                ///auras
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> Auras
                {
                    get { return auras_; }
                }

                /// <summary>Field number for the "is_engaged" field.</summary>
                public const int IsEngagedFieldNumber = 15;
                private bool isEngaged_;
                /// <summary>
                ///combat
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool IsEngaged
                {
                    get { return isEngaged_; }
                    set
                    {
                        isEngaged_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Interactable);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Interactable other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (Type != other.Type) return false;
                    if (CharacterId != other.CharacterId) return false;
                    if (LastProcessedClientTick != other.LastProcessedClientTick) return false;
                    if (Classname != other.Classname) return false;
                    if (Level != other.Level) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentHealth, other.CurrentHealth)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentPower, other.CurrentPower)) return false;
                    if (Invulnerable != other.Invulnerable) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GlobalCooldown, other.GlobalCooldown)) return false;
                    if (Target != other.Target) return false;
                    if (!auras_.Equals(other.auras_)) return false;
                    if (IsEngaged != other.IsEngaged) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (Type != 0) hash ^= Type.GetHashCode();
                    if (CharacterId != 0L) hash ^= CharacterId.GetHashCode();
                    if (LastProcessedClientTick != 0L) hash ^= LastProcessedClientTick.GetHashCode();
                    if (Classname.Length != 0) hash ^= Classname.GetHashCode();
                    if (Level != 0) hash ^= Level.GetHashCode();
                    if (CurrentHealth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentHealth);
                    if (CurrentPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentPower);
                    if (Invulnerable != false) hash ^= Invulnerable.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
                    if (GlobalCooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GlobalCooldown);
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    hash ^= auras_.GetHashCode();
                    if (IsEngaged != false) hash ^= IsEngaged.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (Type != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteEnum((int)Type);
                    }
                    if (CharacterId != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(CharacterId);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt64(LastProcessedClientTick);
                    }
                    if (Classname.Length != 0)
                    {
                        output.WriteRawTag(42);
                        output.WriteString(Classname);
                    }
                    if (Level != 0)
                    {
                        output.WriteRawTag(48);
                        output.WriteInt32(Level);
                    }
                    if (CurrentHealth != 0F)
                    {
                        output.WriteRawTag(61);
                        output.WriteFloat(CurrentHealth);
                    }
                    if (CurrentPower != 0F)
                    {
                        output.WriteRawTag(69);
                        output.WriteFloat(CurrentPower);
                    }
                    if (Invulnerable != false)
                    {
                        output.WriteRawTag(72);
                        output.WriteBool(Invulnerable);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(82);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(93);
                        output.WriteFloat(Rotation);
                    }
                    if (GlobalCooldown != 0F)
                    {
                        output.WriteRawTag(101);
                        output.WriteFloat(GlobalCooldown);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(106);
                        output.WriteString(Target);
                    }
                    auras_.WriteTo(output, _repeated_auras_codec);
                    if (IsEngaged != false)
                    {
                        output.WriteRawTag(120);
                        output.WriteBool(IsEngaged);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (Type != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
                    }
                    if (CharacterId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterId);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastProcessedClientTick);
                    }
                    if (Classname.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Classname);
                    }
                    if (Level != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
                    }
                    if (CurrentHealth != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (CurrentPower != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Invulnerable != false)
                    {
                        size += 1 + 1;
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (GlobalCooldown != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    size += auras_.CalculateSize(_repeated_auras_codec);
                    if (IsEngaged != false)
                    {
                        size += 1 + 1;
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Interactable other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.Type != 0)
                    {
                        Type = other.Type;
                    }
                    if (other.CharacterId != 0L)
                    {
                        CharacterId = other.CharacterId;
                    }
                    if (other.LastProcessedClientTick != 0L)
                    {
                        LastProcessedClientTick = other.LastProcessedClientTick;
                    }
                    if (other.Classname.Length != 0)
                    {
                        Classname = other.Classname;
                    }
                    if (other.Level != 0)
                    {
                        Level = other.Level;
                    }
                    if (other.CurrentHealth != 0F)
                    {
                        CurrentHealth = other.CurrentHealth;
                    }
                    if (other.CurrentPower != 0F)
                    {
                        CurrentPower = other.CurrentPower;
                    }
                    if (other.Invulnerable != false)
                    {
                        Invulnerable = other.Invulnerable;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            Position = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.GlobalCooldown != 0F)
                    {
                        GlobalCooldown = other.GlobalCooldown;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    auras_.Add(other.auras_);
                    if (other.IsEngaged != false)
                    {
                        IsEngaged = other.IsEngaged;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    Type = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type)input.ReadEnum();
                                    break;
                                }
                            case 24:
                                {
                                    CharacterId = input.ReadInt64();
                                    break;
                                }
                            case 32:
                                {
                                    LastProcessedClientTick = input.ReadInt64();
                                    break;
                                }
                            case 42:
                                {
                                    Classname = input.ReadString();
                                    break;
                                }
                            case 48:
                                {
                                    Level = input.ReadInt32();
                                    break;
                                }
                            case 61:
                                {
                                    CurrentHealth = input.ReadFloat();
                                    break;
                                }
                            case 69:
                                {
                                    CurrentPower = input.ReadFloat();
                                    break;
                                }
                            case 72:
                                {
                                    Invulnerable = input.ReadBool();
                                    break;
                                }
                            case 82:
                                {
                                    if (position_ == null)
                                    {
                                        Position = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(Position);
                                    break;
                                }
                            case 93:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 101:
                                {
                                    GlobalCooldown = input.ReadFloat();
                                    break;
                                }
                            case 106:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                            case 114:
                                {
                                    auras_.AddEntriesFrom(input, _repeated_auras_codec);
                                    break;
                                }
                            case 120:
                                {
                                    IsEngaged = input.ReadBool();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Interactable message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum Type
                    {
                        [pbr::OriginalName("Player")] Player = 0,
                        [pbr::OriginalName("NPC")] Npc = 1,
                    }

                }
                #endregion

            }

            public sealed partial class Aura : pb::IMessage<Aura>
            {
                private static readonly pb::MessageParser<Aura> _parser = new pb::MessageParser<Aura>(() => new Aura());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Aura> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[4]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura(Aura other) : this()
                {
                    createdAtTick_ = other.createdAtTick_;
                    creator_ = other.creator_;
                    effectId_ = other.effectId_;
                    auraTickCount_ = other.auraTickCount_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura Clone()
                {
                    return new Aura(this);
                }

                /// <summary>Field number for the "created_at_tick" field.</summary>
                public const int CreatedAtTickFieldNumber = 1;
                private long createdAtTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CreatedAtTick
                {
                    get { return createdAtTick_; }
                    set
                    {
                        createdAtTick_ = value;
                    }
                }

                /// <summary>Field number for the "creator" field.</summary>
                public const int CreatorFieldNumber = 2;
                private string creator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Creator
                {
                    get { return creator_; }
                    set
                    {
                        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "effect_id" field.</summary>
                public const int EffectIdFieldNumber = 3;
                private long effectId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long EffectId
                {
                    get { return effectId_; }
                    set
                    {
                        effectId_ = value;
                    }
                }

                /// <summary>Field number for the "aura_tick_count" field.</summary>
                public const int AuraTickCountFieldNumber = 4;
                private int auraTickCount_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int AuraTickCount
                {
                    get { return auraTickCount_; }
                    set
                    {
                        auraTickCount_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Aura);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Aura other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (CreatedAtTick != other.CreatedAtTick) return false;
                    if (Creator != other.Creator) return false;
                    if (EffectId != other.EffectId) return false;
                    if (AuraTickCount != other.AuraTickCount) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (CreatedAtTick != 0L) hash ^= CreatedAtTick.GetHashCode();
                    if (Creator.Length != 0) hash ^= Creator.GetHashCode();
                    if (EffectId != 0L) hash ^= EffectId.GetHashCode();
                    if (AuraTickCount != 0) hash ^= AuraTickCount.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (CreatedAtTick != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Creator);
                    }
                    if (EffectId != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(EffectId);
                    }
                    if (AuraTickCount != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt32(AuraTickCount);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (CreatedAtTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
                    }
                    if (EffectId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EffectId);
                    }
                    if (AuraTickCount != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuraTickCount);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Aura other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.CreatedAtTick != 0L)
                    {
                        CreatedAtTick = other.CreatedAtTick;
                    }
                    if (other.Creator.Length != 0)
                    {
                        Creator = other.Creator;
                    }
                    if (other.EffectId != 0L)
                    {
                        EffectId = other.EffectId;
                    }
                    if (other.AuraTickCount != 0)
                    {
                        AuraTickCount = other.AuraTickCount;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    CreatedAtTick = input.ReadInt64();
                                    break;
                                }
                            case 18:
                                {
                                    Creator = input.ReadString();
                                    break;
                                }
                            case 24:
                                {
                                    EffectId = input.ReadInt64();
                                    break;
                                }
                            case 32:
                                {
                                    AuraTickCount = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Projectile : pb::IMessage<Projectile>
            {
                private static readonly pb::MessageParser<Projectile> _parser = new pb::MessageParser<Projectile>(() => new Projectile());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Projectile> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[5]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile(Projectile other) : this()
                {
                    id_ = other.id_;
                    spellId_ = other.spellId_;
                    createdAtTick_ = other.createdAtTick_;
                    creator_ = other.creator_;
                    position_ = other.position_ != null ? other.position_.Clone() : null;
                    rotation_ = other.rotation_;
                    target_ = other.target_;
                    speed_ = other.speed_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile Clone()
                {
                    return new Projectile(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                ///system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "spell_id" field.</summary>
                public const int SpellIdFieldNumber = 2;
                private long spellId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SpellId
                {
                    get { return spellId_; }
                    set
                    {
                        spellId_ = value;
                    }
                }

                /// <summary>Field number for the "created_at_tick" field.</summary>
                public const int CreatedAtTickFieldNumber = 3;
                private long createdAtTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CreatedAtTick
                {
                    get { return createdAtTick_; }
                    set
                    {
                        createdAtTick_ = value;
                    }
                }

                /// <summary>Field number for the "creator" field.</summary>
                public const int CreatorFieldNumber = 4;
                private string creator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Creator
                {
                    get { return creator_; }
                    set
                    {
                        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 5;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 6;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 7;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "speed" field.</summary>
                public const int SpeedFieldNumber = 8;
                private float speed_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Speed
                {
                    get { return speed_; }
                    set
                    {
                        speed_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Projectile);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Projectile other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (SpellId != other.SpellId) return false;
                    if (CreatedAtTick != other.CreatedAtTick) return false;
                    if (Creator != other.Creator) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
                    if (Target != other.Target) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (SpellId != 0L) hash ^= SpellId.GetHashCode();
                    if (CreatedAtTick != 0L) hash ^= CreatedAtTick.GetHashCode();
                    if (Creator.Length != 0) hash ^= Creator.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (SpellId != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(SpellId);
                    }
                    if (CreatedAtTick != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(Creator);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(42);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(53);
                        output.WriteFloat(Rotation);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(58);
                        output.WriteString(Target);
                    }
                    if (Speed != 0F)
                    {
                        output.WriteRawTag(69);
                        output.WriteFloat(Speed);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (SpellId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
                    }
                    if (CreatedAtTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    if (Speed != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Projectile other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.SpellId != 0L)
                    {
                        SpellId = other.SpellId;
                    }
                    if (other.CreatedAtTick != 0L)
                    {
                        CreatedAtTick = other.CreatedAtTick;
                    }
                    if (other.Creator.Length != 0)
                    {
                        Creator = other.Creator;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            Position = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    if (other.Speed != 0F)
                    {
                        Speed = other.Speed;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    SpellId = input.ReadInt64();
                                    break;
                                }
                            case 24:
                                {
                                    CreatedAtTick = input.ReadInt64();
                                    break;
                                }
                            case 34:
                                {
                                    Creator = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    if (position_ == null)
                                    {
                                        Position = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(Position);
                                    break;
                                }
                            case 53:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 58:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                            case 69:
                                {
                                    Speed = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Vector2Df : pb::IMessage<Vector2Df>
            {
                private static readonly pb::MessageParser<Vector2Df> _parser = new pb::MessageParser<Vector2Df>(() => new Vector2Df());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Vector2Df> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[6]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df(Vector2Df other) : this()
                {
                    x_ = other.x_;
                    y_ = other.y_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df Clone()
                {
                    return new Vector2Df(this);
                }

                /// <summary>Field number for the "x" field.</summary>
                public const int XFieldNumber = 1;
                private float x_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float X
                {
                    get { return x_; }
                    set
                    {
                        x_ = value;
                    }
                }

                /// <summary>Field number for the "y" field.</summary>
                public const int YFieldNumber = 2;
                private float y_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Y
                {
                    get { return y_; }
                    set
                    {
                        y_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Vector2Df);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Vector2Df other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
                    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (X != 0F)
                    {
                        output.WriteRawTag(13);
                        output.WriteFloat(X);
                    }
                    if (Y != 0F)
                    {
                        output.WriteRawTag(21);
                        output.WriteFloat(Y);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (X != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Y != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Vector2Df other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.X != 0F)
                    {
                        X = other.X;
                    }
                    if (other.Y != 0F)
                    {
                        Y = other.Y;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 13:
                                {
                                    X = input.ReadFloat();
                                    break;
                                }
                            case 21:
                                {
                                    Y = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///opId = 0
    /// </summary>
    public sealed partial class Client_Message : pb::IMessage<Client_Message>
    {
        private static readonly pb::MessageParser<Client_Message> _parser = new pb::MessageParser<Client_Message>(() => new Client_Message());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client_Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Message()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Message(Client_Message other) : this()
        {
            clientTick_ = other.clientTick_;
            switch (other.TypeCase)
            {
                case TypeOneofCase.Character:
                    Character = other.Character.Clone();
                    break;
                case TypeOneofCase.Cast:
                    Cast = other.Cast.Clone();
                    break;
                case TypeOneofCase.AutoAttack:
                    AutoAttack = other.AutoAttack.Clone();
                    break;
                case TypeOneofCase.CancelAttack:
                    CancelAttack = other.CancelAttack.Clone();
                    break;
                case TypeOneofCase.Move:
                    Move = other.Move.Clone();
                    break;
                case TypeOneofCase.SelectChar:
                    SelectChar = other.SelectChar.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Message Clone()
        {
            return new Client_Message(this);
        }

        /// <summary>Field number for the "client_tick" field.</summary>
        public const int ClientTickFieldNumber = 1;
        private long clientTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ClientTick
        {
            get { return clientTick_; }
            set
            {
                clientTick_ = value;
            }
        }

        /// <summary>Field number for the "character" field.</summary>
        public const int CharacterFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character Character
        {
            get { return typeCase_ == TypeOneofCase.Character ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Character;
            }
        }

        /// <summary>Field number for the "cast" field.</summary>
        public const int CastFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast Cast
        {
            get { return typeCase_ == TypeOneofCase.Cast ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Cast;
            }
        }

        /// <summary>Field number for the "auto_attack" field.</summary>
        public const int AutoAttackFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack AutoAttack
        {
            get { return typeCase_ == TypeOneofCase.AutoAttack ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.AutoAttack;
            }
        }

        /// <summary>Field number for the "cancel_attack" field.</summary>
        public const int CancelAttackFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack CancelAttack
        {
            get { return typeCase_ == TypeOneofCase.CancelAttack ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CancelAttack;
            }
        }

        /// <summary>Field number for the "move" field.</summary>
        public const int MoveFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement Move
        {
            get { return typeCase_ == TypeOneofCase.Move ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Move;
            }
        }

        /// <summary>Field number for the "select_char" field.</summary>
        public const int SelectCharFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter SelectChar
        {
            get { return typeCase_ == TypeOneofCase.SelectChar ? (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter)type_ : null; }
            set
            {
                type_ = value;
                typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.SelectChar;
            }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase
        {
            None = 0,
            Character = 2,
            Cast = 3,
            AutoAttack = 4,
            CancelAttack = 5,
            Move = 6,
            SelectChar = 7,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofCase TypeCase
        {
            get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType()
        {
            typeCase_ = TypeOneofCase.None;
            type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Client_Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client_Message other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientTick != other.ClientTick) return false;
            if (!object.Equals(Character, other.Character)) return false;
            if (!object.Equals(Cast, other.Cast)) return false;
            if (!object.Equals(AutoAttack, other.AutoAttack)) return false;
            if (!object.Equals(CancelAttack, other.CancelAttack)) return false;
            if (!object.Equals(Move, other.Move)) return false;
            if (!object.Equals(SelectChar, other.SelectChar)) return false;
            if (TypeCase != other.TypeCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
            if (typeCase_ == TypeOneofCase.Character) hash ^= Character.GetHashCode();
            if (typeCase_ == TypeOneofCase.Cast) hash ^= Cast.GetHashCode();
            if (typeCase_ == TypeOneofCase.AutoAttack) hash ^= AutoAttack.GetHashCode();
            if (typeCase_ == TypeOneofCase.CancelAttack) hash ^= CancelAttack.GetHashCode();
            if (typeCase_ == TypeOneofCase.Move) hash ^= Move.GetHashCode();
            if (typeCase_ == TypeOneofCase.SelectChar) hash ^= SelectChar.GetHashCode();
            hash ^= (int)typeCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientTick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(ClientTick);
            }
            if (typeCase_ == TypeOneofCase.Character)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Character);
            }
            if (typeCase_ == TypeOneofCase.Cast)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Cast);
            }
            if (typeCase_ == TypeOneofCase.AutoAttack)
            {
                output.WriteRawTag(34);
                output.WriteMessage(AutoAttack);
            }
            if (typeCase_ == TypeOneofCase.CancelAttack)
            {
                output.WriteRawTag(42);
                output.WriteMessage(CancelAttack);
            }
            if (typeCase_ == TypeOneofCase.Move)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Move);
            }
            if (typeCase_ == TypeOneofCase.SelectChar)
            {
                output.WriteRawTag(58);
                output.WriteMessage(SelectChar);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientTick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
            }
            if (typeCase_ == TypeOneofCase.Character)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
            }
            if (typeCase_ == TypeOneofCase.Cast)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cast);
            }
            if (typeCase_ == TypeOneofCase.AutoAttack)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoAttack);
            }
            if (typeCase_ == TypeOneofCase.CancelAttack)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelAttack);
            }
            if (typeCase_ == TypeOneofCase.Move)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
            }
            if (typeCase_ == TypeOneofCase.SelectChar)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectChar);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client_Message other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientTick != 0L)
            {
                ClientTick = other.ClientTick;
            }
            switch (other.TypeCase)
            {
                case TypeOneofCase.Character:
                    if (Character == null)
                    {
                        Character = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character();
                    }
                    Character.MergeFrom(other.Character);
                    break;
                case TypeOneofCase.Cast:
                    if (Cast == null)
                    {
                        Cast = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast();
                    }
                    Cast.MergeFrom(other.Cast);
                    break;
                case TypeOneofCase.AutoAttack:
                    if (AutoAttack == null)
                    {
                        AutoAttack = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack();
                    }
                    AutoAttack.MergeFrom(other.AutoAttack);
                    break;
                case TypeOneofCase.CancelAttack:
                    if (CancelAttack == null)
                    {
                        CancelAttack = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack();
                    }
                    CancelAttack.MergeFrom(other.CancelAttack);
                    break;
                case TypeOneofCase.Move:
                    if (Move == null)
                    {
                        Move = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement();
                    }
                    Move.MergeFrom(other.Move);
                    break;
                case TypeOneofCase.SelectChar:
                    if (SelectChar == null)
                    {
                        SelectChar = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter();
                    }
                    SelectChar.MergeFrom(other.SelectChar);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            ClientTick = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Character();
                            if (typeCase_ == TypeOneofCase.Character)
                            {
                                subBuilder.MergeFrom(Character);
                            }
                            input.ReadMessage(subBuilder);
                            Character = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Cast();
                            if (typeCase_ == TypeOneofCase.Cast)
                            {
                                subBuilder.MergeFrom(Cast);
                            }
                            input.ReadMessage(subBuilder);
                            Cast = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack();
                            if (typeCase_ == TypeOneofCase.AutoAttack)
                            {
                                subBuilder.MergeFrom(AutoAttack);
                            }
                            input.ReadMessage(subBuilder);
                            AutoAttack = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_CancelAttack();
                            if (typeCase_ == TypeOneofCase.CancelAttack)
                            {
                                subBuilder.MergeFrom(CancelAttack);
                            }
                            input.ReadMessage(subBuilder);
                            CancelAttack = subBuilder;
                            break;
                        }
                    case 50:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Movement();
                            if (typeCase_ == TypeOneofCase.Move)
                            {
                                subBuilder.MergeFrom(Move);
                            }
                            input.ReadMessage(subBuilder);
                            Move = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter subBuilder = new global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_SelectCharacter();
                            if (typeCase_ == TypeOneofCase.SelectChar)
                            {
                                subBuilder.MergeFrom(SelectChar);
                            }
                            input.ReadMessage(subBuilder);
                            SelectChar = subBuilder;
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Client_Message message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Client_Character : pb::IMessage<Client_Character>
            {
                private static readonly pb::MessageParser<Client_Character> _parser = new pb::MessageParser<Client_Character>(() => new Client_Character());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_Character> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Character()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Character(Client_Character other) : this()
                {
                    lastConfirmedServerTick_ = other.lastConfirmedServerTick_;
                    target_ = other.target_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Character Clone()
                {
                    return new Client_Character(this);
                }

                /// <summary>Field number for the "last_confirmed_server_tick" field.</summary>
                public const int LastConfirmedServerTickFieldNumber = 2;
                private long lastConfirmedServerTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long LastConfirmedServerTick
                {
                    get { return lastConfirmedServerTick_; }
                    set
                    {
                        lastConfirmedServerTick_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 3;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_Character);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_Character other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (LastConfirmedServerTick != other.LastConfirmedServerTick) return false;
                    if (Target != other.Target) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (LastConfirmedServerTick != 0L) hash ^= LastConfirmedServerTick.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (LastConfirmedServerTick != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(LastConfirmedServerTick);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(Target);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (LastConfirmedServerTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastConfirmedServerTick);
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_Character other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.LastConfirmedServerTick != 0L)
                    {
                        LastConfirmedServerTick = other.LastConfirmedServerTick;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 16:
                                {
                                    LastConfirmedServerTick = input.ReadInt64();
                                    break;
                                }
                            case 26:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///opId = 1
            /// </summary>
            public sealed partial class Client_Cast : pb::IMessage<Client_Cast>
            {
                private static readonly pb::MessageParser<Client_Cast> _parser = new pb::MessageParser<Client_Cast>(() => new Client_Cast());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_Cast> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Cast()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Cast(Client_Cast other) : this()
                {
                    clientTick_ = other.clientTick_;
                    spellId_ = other.spellId_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Cast Clone()
                {
                    return new Client_Cast(this);
                }

                /// <summary>Field number for the "client_tick" field.</summary>
                public const int ClientTickFieldNumber = 1;
                private long clientTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long ClientTick
                {
                    get { return clientTick_; }
                    set
                    {
                        clientTick_ = value;
                    }
                }

                /// <summary>Field number for the "spell_id" field.</summary>
                public const int SpellIdFieldNumber = 2;
                private long spellId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SpellId
                {
                    get { return spellId_; }
                    set
                    {
                        spellId_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_Cast);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_Cast other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (ClientTick != other.ClientTick) return false;
                    if (SpellId != other.SpellId) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
                    if (SpellId != 0L) hash ^= SpellId.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (ClientTick != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(ClientTick);
                    }
                    if (SpellId != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(SpellId);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (ClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
                    }
                    if (SpellId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_Cast other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.ClientTick != 0L)
                    {
                        ClientTick = other.ClientTick;
                    }
                    if (other.SpellId != 0L)
                    {
                        SpellId = other.SpellId;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    ClientTick = input.ReadInt64();
                                    break;
                                }
                            case 16:
                                {
                                    SpellId = input.ReadInt64();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///opId = 2
            /// </summary>
            public sealed partial class Client_Autoattack : pb::IMessage<Client_Autoattack>
            {
                private static readonly pb::MessageParser<Client_Autoattack> _parser = new pb::MessageParser<Client_Autoattack>(() => new Client_Autoattack());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_Autoattack> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Autoattack()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Autoattack(Client_Autoattack other) : this()
                {
                    clientTick_ = other.clientTick_;
                    attacktype_ = other.attacktype_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Autoattack Clone()
                {
                    return new Client_Autoattack(this);
                }

                /// <summary>Field number for the "client_tick" field.</summary>
                public const int ClientTickFieldNumber = 2;
                private long clientTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long ClientTick
                {
                    get { return clientTick_; }
                    set
                    {
                        clientTick_ = value;
                    }
                }

                /// <summary>Field number for the "attacktype" field.</summary>
                public const int AttacktypeFieldNumber = 3;
                private global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack.Types.Type attacktype_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack.Types.Type Attacktype
                {
                    get { return attacktype_; }
                    set
                    {
                        attacktype_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_Autoattack);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_Autoattack other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (ClientTick != other.ClientTick) return false;
                    if (Attacktype != other.Attacktype) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
                    if (Attacktype != 0) hash ^= Attacktype.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (ClientTick != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(ClientTick);
                    }
                    if (Attacktype != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteEnum((int)Attacktype);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (ClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
                    }
                    if (Attacktype != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Attacktype);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_Autoattack other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.ClientTick != 0L)
                    {
                        ClientTick = other.ClientTick;
                    }
                    if (other.Attacktype != 0)
                    {
                        Attacktype = other.Attacktype;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 16:
                                {
                                    ClientTick = input.ReadInt64();
                                    break;
                                }
                            case 24:
                                {
                                    Attacktype = (global::NakamaMinimalGame.PublicMatchState.Client_Message.Types.Client_Autoattack.Types.Type)input.ReadEnum();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Client_Autoattack message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum Type
                    {
                        [pbr::OriginalName("Meele")] Meele = 0,
                        [pbr::OriginalName("Range")] Range = 1,
                        [pbr::OriginalName("Wand")] Wand = 2,
                    }

                }
                #endregion

            }

            /// <summary>
            ///opId = 3
            /// </summary>
            public sealed partial class Client_CancelAttack : pb::IMessage<Client_CancelAttack>
            {
                private static readonly pb::MessageParser<Client_CancelAttack> _parser = new pb::MessageParser<Client_CancelAttack>(() => new Client_CancelAttack());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_CancelAttack> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_CancelAttack()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_CancelAttack(Client_CancelAttack other) : this()
                {
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_CancelAttack Clone()
                {
                    return new Client_CancelAttack(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_CancelAttack);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_CancelAttack other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_CancelAttack other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                        }
                    }
                }

            }

            /// <summary>
            ///opId = 4
            /// </summary>
            public sealed partial class Client_Movement : pb::IMessage<Client_Movement>
            {
                private static readonly pb::MessageParser<Client_Movement> _parser = new pb::MessageParser<Client_Movement>(() => new Client_Movement());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_Movement> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[4]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Movement()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Movement(Client_Movement other) : this()
                {
                    clientTick_ = other.clientTick_;
                    absoluteCoordinates_ = other.absoluteCoordinates_;
                    xAxis_ = other.xAxis_;
                    yAxis_ = other.yAxis_;
                    rotation_ = other.rotation_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_Movement Clone()
                {
                    return new Client_Movement(this);
                }

                /// <summary>Field number for the "client_tick" field.</summary>
                public const int ClientTickFieldNumber = 1;
                private long clientTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long ClientTick
                {
                    get { return clientTick_; }
                    set
                    {
                        clientTick_ = value;
                    }
                }

                /// <summary>Field number for the "absolute_coordinates" field.</summary>
                public const int AbsoluteCoordinatesFieldNumber = 2;
                private bool absoluteCoordinates_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool AbsoluteCoordinates
                {
                    get { return absoluteCoordinates_; }
                    set
                    {
                        absoluteCoordinates_ = value;
                    }
                }

                /// <summary>Field number for the "x_axis" field.</summary>
                public const int XAxisFieldNumber = 3;
                private float xAxis_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float XAxis
                {
                    get { return xAxis_; }
                    set
                    {
                        xAxis_ = value;
                    }
                }

                /// <summary>Field number for the "y_axis" field.</summary>
                public const int YAxisFieldNumber = 4;
                private float yAxis_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float YAxis
                {
                    get { return yAxis_; }
                    set
                    {
                        yAxis_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 5;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_Movement);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_Movement other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (ClientTick != other.ClientTick) return false;
                    if (AbsoluteCoordinates != other.AbsoluteCoordinates) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YAxis, other.YAxis)) return false;
                    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
                    if (AbsoluteCoordinates != false) hash ^= AbsoluteCoordinates.GetHashCode();
                    if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
                    if (YAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YAxis);
                    if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (ClientTick != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(ClientTick);
                    }
                    if (AbsoluteCoordinates != false)
                    {
                        output.WriteRawTag(16);
                        output.WriteBool(AbsoluteCoordinates);
                    }
                    if (XAxis != 0F)
                    {
                        output.WriteRawTag(29);
                        output.WriteFloat(XAxis);
                    }
                    if (YAxis != 0F)
                    {
                        output.WriteRawTag(37);
                        output.WriteFloat(YAxis);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(45);
                        output.WriteFloat(Rotation);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (ClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
                    }
                    if (AbsoluteCoordinates != false)
                    {
                        size += 1 + 1;
                    }
                    if (XAxis != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (YAxis != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_Movement other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.ClientTick != 0L)
                    {
                        ClientTick = other.ClientTick;
                    }
                    if (other.AbsoluteCoordinates != false)
                    {
                        AbsoluteCoordinates = other.AbsoluteCoordinates;
                    }
                    if (other.XAxis != 0F)
                    {
                        XAxis = other.XAxis;
                    }
                    if (other.YAxis != 0F)
                    {
                        YAxis = other.YAxis;
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    ClientTick = input.ReadInt64();
                                    break;
                                }
                            case 16:
                                {
                                    AbsoluteCoordinates = input.ReadBool();
                                    break;
                                }
                            case 29:
                                {
                                    XAxis = input.ReadFloat();
                                    break;
                                }
                            case 37:
                                {
                                    YAxis = input.ReadFloat();
                                    break;
                                }
                            case 45:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///opId = 100
            /// </summary>
            public sealed partial class Client_SelectCharacter : pb::IMessage<Client_SelectCharacter>
            {
                private static readonly pb::MessageParser<Client_SelectCharacter> _parser = new pb::MessageParser<Client_SelectCharacter>(() => new Client_SelectCharacter());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Client_SelectCharacter> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.Client_Message.Descriptor.NestedTypes[5]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_SelectCharacter()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_SelectCharacter(Client_SelectCharacter other) : this()
                {
                    classname_ = other.classname_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Client_SelectCharacter Clone()
                {
                    return new Client_SelectCharacter(this);
                }

                /// <summary>Field number for the "classname" field.</summary>
                public const int ClassnameFieldNumber = 1;
                private string classname_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Classname
                {
                    get { return classname_; }
                    set
                    {
                        classname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Client_SelectCharacter);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Client_SelectCharacter other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Classname != other.Classname) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Classname.Length != 0) hash ^= Classname.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Classname.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Classname);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Classname.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Classname);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Client_SelectCharacter other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Classname.Length != 0)
                    {
                        Classname = other.Classname;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Classname = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
