// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchstate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.PublicMatchState
{

    /// <summary>Holder for reflection information generated from matchstate.proto</summary>
    public static partial class MatchstateReflection
    {

        #region Descriptor
        /// <summary>File descriptor for matchstate.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MatchstateReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChBtYXRjaHN0YXRlLnByb3RvEgRtYWluItIHChBQdWJsaWNNYXRjaFN0YXRl",
                  "EgwKBHRpY2sYASABKAMSEQoJc3RvcHdhdGNoGAIgAygDEjIKBnBsYXllchgD",
                  "IAMoCzIiLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5QbGF5ZXJFbnRyeRIsCgNu",
                  "cGMYBCADKAsyHy5tYWluLlB1YmxpY01hdGNoU3RhdGUuTnBjRW50cnkSOgoK",
                  "cHJvamVjdGlsZRgFIAMoCzImLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Qcm9q",
                  "ZWN0aWxlRW50cnkaTAoLUGxheWVyRW50cnkSCwoDa2V5GAEgASgJEiwKBXZh",
                  "bHVlGAIgASgLMh0ubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlBsYXllcjoCOAEa",
                  "RgoITnBjRW50cnkSCwoDa2V5GAEgASgJEikKBXZhbHVlGAIgASgLMhoubWFp",
                  "bi5QdWJsaWNNYXRjaFN0YXRlLk5QQzoCOAEaVAoPUHJvamVjdGlsZUVudHJ5",
                  "EgsKA2tleRgBIAEoCRIwCgV2YWx1ZRgCIAEoCzIhLm1haW4uUHVibGljTWF0",
                  "Y2hTdGF0ZS5Qcm9qZWN0aWxlOgI4ARrWAQoGUGxheWVyEgoKAmlkGAEgASgJ",
                  "EiIKGmxhc3RfcHJvY2Vzc2VkX2NsaWVudF90aWNrGAIgASgDEg4KBmVycm9y",
                  "cxgDIAMoCRIOCgZoZWFsdGgYBCABKAUSDQoFcG93ZXIYBSABKAUSMgoIcG9z",
                  "aXRpb24YBiABKAsyIC5tYWluLlB1YmxpY01hdGNoU3RhdGUuVmVjdG9yMkRm",
                  "EhAKCHJvdGF0aW9uGAcgASgCEhcKD2dsb2JhbF9jb29sZG93bhgIIAEoAhIO",
                  "CgZ0YXJnZXQYCSABKAkahgEKA05QQxIKCgJpZBgBIAEoCRIOCgZoZWFsdGgY",
                  "AiABKAUSDQoFcG93ZXIYAyABKAUSMgoIcG9zaXRpb24YBCABKAsyIC5tYWlu",
                  "LlB1YmxpY01hdGNoU3RhdGUuVmVjdG9yMkRmEhAKCHJvdGF0aW9uGAUgASgC",
                  "Eg4KBnRhcmdldBgGIAEoCRqNAQoKUHJvamVjdGlsZRIKCgJpZBgBIAEoCRIy",
                  "Cghwb3NpdGlvbhgCIAEoCzIgLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5WZWN0",
                  "b3IyRGYSEAoIcm90YXRpb24YAyABKAISDgoGdGFyZ2V0GAQgASgJEg0KBXNw",
                  "ZWVkGAUgASgCEg4KBmRhbWFnZRgGIAEoBRohCglWZWN0b3IyRGYSCQoBeBgB",
                  "IAEoAhIJCgF5GAIgASgCImkKEENsaWVudF9DaGFyYWN0ZXISEwoLY2xpZW50",
                  "X3RpY2sYASABKAMSDgoGeF9heGlzGAIgASgCEg4KBnlfYXhpcxgDIAEoAhIQ",
                  "Cghyb3RhdGlvbhgEIAEoAhIOCgZ0YXJnZXQYBSABKAkiIAoLQ2xpZW50X0Nh",
                  "c3QSEQoJc3BlbGxuYW1lGAEgASgJQiWqAiJOYWthbWFNaW5pbWFsR2FtZS5Q",
                  "dWJsaWNNYXRjaFN0YXRlYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Parser, new[]{ "Tick", "Stopwatch", "Player", "Npc", "Projectile" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player.Parser, new[]{ "Id", "LastProcessedClientTick", "Errors", "Health", "Power", "Position", "Rotation", "GlobalCooldown", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC.Parser, new[]{ "Id", "Health", "Power", "Position", "Rotation", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser, new[]{ "Id", "Position", "Rotation", "Target", "Speed", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df.Parser, new[]{ "X", "Y" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Character), global::NakamaMinimalGame.PublicMatchState.Client_Character.Parser, new[]{ "ClientTick", "XAxis", "YAxis", "Rotation", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Cast), global::NakamaMinimalGame.PublicMatchState.Client_Cast.Parser, new[]{ "Spellname" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class PublicMatchState : pb::IMessage<PublicMatchState>
    {
        private static readonly pb::MessageParser<PublicMatchState> _parser = new pb::MessageParser<PublicMatchState>(() => new PublicMatchState());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PublicMatchState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState(PublicMatchState other) : this()
        {
            tick_ = other.tick_;
            stopwatch_ = other.stopwatch_.Clone();
            player_ = other.player_.Clone();
            npc_ = other.npc_.Clone();
            projectile_ = other.projectile_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState Clone()
        {
            return new PublicMatchState(this);
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 1;
        private long tick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Tick
        {
            get { return tick_; }
            set
            {
                tick_ = value;
            }
        }

        /// <summary>Field number for the "stopwatch" field.</summary>
        public const int StopwatchFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_stopwatch_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> stopwatch_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Stopwatch
        {
            get { return stopwatch_; }
        }

        /// <summary>Field number for the "player" field.</summary>
        public const int PlayerFieldNumber = 3;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>.Codec _map_player_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player.Parser), 26);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player> player_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player> Player
        {
            get { return player_; }
        }

        /// <summary>Field number for the "npc" field.</summary>
        public const int NpcFieldNumber = 4;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC>.Codec _map_npc_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC.Parser), 34);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC> npc_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.NPC> Npc
        {
            get { return npc_; }
        }

        /// <summary>Field number for the "projectile" field.</summary>
        public const int ProjectileFieldNumber = 5;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec _map_projectile_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser), 42);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> projectile_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> Projectile
        {
            get { return projectile_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PublicMatchState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PublicMatchState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Tick != other.Tick) return false;
            if (!stopwatch_.Equals(other.stopwatch_)) return false;
            if (!Player.Equals(other.Player)) return false;
            if (!Npc.Equals(other.Npc)) return false;
            if (!Projectile.Equals(other.Projectile)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Tick != 0L) hash ^= Tick.GetHashCode();
            hash ^= stopwatch_.GetHashCode();
            hash ^= Player.GetHashCode();
            hash ^= Npc.GetHashCode();
            hash ^= Projectile.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Tick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Tick);
            }
            stopwatch_.WriteTo(output, _repeated_stopwatch_codec);
            player_.WriteTo(output, _map_player_codec);
            npc_.WriteTo(output, _map_npc_codec);
            projectile_.WriteTo(output, _map_projectile_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Tick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
            }
            size += stopwatch_.CalculateSize(_repeated_stopwatch_codec);
            size += player_.CalculateSize(_map_player_codec);
            size += npc_.CalculateSize(_map_npc_codec);
            size += projectile_.CalculateSize(_map_projectile_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PublicMatchState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Tick != 0L)
            {
                Tick = other.Tick;
            }
            stopwatch_.Add(other.stopwatch_);
            player_.Add(other.player_);
            npc_.Add(other.npc_);
            projectile_.Add(other.projectile_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Tick = input.ReadInt64();
                            break;
                        }
                    case 18:
                    case 16:
                        {
                            stopwatch_.AddEntriesFrom(input, _repeated_stopwatch_codec);
                            break;
                        }
                    case 26:
                        {
                            player_.AddEntriesFrom(input, _map_player_codec);
                            break;
                        }
                    case 34:
                        {
                            npc_.AddEntriesFrom(input, _map_npc_codec);
                            break;
                        }
                    case 42:
                        {
                            projectile_.AddEntriesFrom(input, _map_projectile_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PublicMatchState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Player : pb::IMessage<Player>
            {
                private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Player> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Player()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Player(Player other) : this()
                {
                    id_ = other.id_;
                    lastProcessedClientTick_ = other.lastProcessedClientTick_;
                    errors_ = other.errors_.Clone();
                    health_ = other.health_;
                    power_ = other.power_;
                    Position = other.position_ != null ? other.Position.Clone() : null;
                    rotation_ = other.rotation_;
                    globalCooldown_ = other.globalCooldown_;
                    target_ = other.target_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Player Clone()
                {
                    return new Player(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                /// system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "last_processed_client_tick" field.</summary>
                public const int LastProcessedClientTickFieldNumber = 2;
                private long lastProcessedClientTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long LastProcessedClientTick
                {
                    get { return lastProcessedClientTick_; }
                    set
                    {
                        lastProcessedClientTick_ = value;
                    }
                }

                /// <summary>Field number for the "errors" field.</summary>
                public const int ErrorsFieldNumber = 3;
                private static readonly pb::FieldCodec<string> _repeated_errors_codec
                    = pb::FieldCodec.ForString(26);
                private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> Errors
                {
                    get { return errors_; }
                }

                /// <summary>Field number for the "health" field.</summary>
                public const int HealthFieldNumber = 4;
                private int health_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Health
                {
                    get { return health_; }
                    set
                    {
                        health_ = value;
                    }
                }

                /// <summary>Field number for the "power" field.</summary>
                public const int PowerFieldNumber = 5;
                private int power_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Power
                {
                    get { return power_; }
                    set
                    {
                        power_ = value;
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 6;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                /// <summary>
                /// pos
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 7;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "global_cooldown" field.</summary>
                public const int GlobalCooldownFieldNumber = 8;
                private float globalCooldown_;
                /// <summary>
                /// combat
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float GlobalCooldown
                {
                    get { return globalCooldown_; }
                    set
                    {
                        globalCooldown_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 9;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Player);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Player other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (LastProcessedClientTick != other.LastProcessedClientTick) return false;
                    if (!errors_.Equals(other.errors_)) return false;
                    if (Health != other.Health) return false;
                    if (Power != other.Power) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (Rotation != other.Rotation) return false;
                    if (GlobalCooldown != other.GlobalCooldown) return false;
                    if (Target != other.Target) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (LastProcessedClientTick != 0L) hash ^= LastProcessedClientTick.GetHashCode();
                    hash ^= errors_.GetHashCode();
                    if (Health != 0) hash ^= Health.GetHashCode();
                    if (Power != 0) hash ^= Power.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
                    if (GlobalCooldown != 0F) hash ^= GlobalCooldown.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(LastProcessedClientTick);
                    }
                    errors_.WriteTo(output, _repeated_errors_codec);
                    if (Health != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt32(Health);
                    }
                    if (Power != 0)
                    {
                        output.WriteRawTag(40);
                        output.WriteInt32(Power);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(50);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(61);
                        output.WriteFloat(Rotation);
                    }
                    if (GlobalCooldown != 0F)
                    {
                        output.WriteRawTag(69);
                        output.WriteFloat(GlobalCooldown);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(74);
                        output.WriteString(Target);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastProcessedClientTick);
                    }
                    size += errors_.CalculateSize(_repeated_errors_codec);
                    if (Health != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
                    }
                    if (Power != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (GlobalCooldown != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Player other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.LastProcessedClientTick != 0L)
                    {
                        LastProcessedClientTick = other.LastProcessedClientTick;
                    }
                    errors_.Add(other.errors_);
                    if (other.Health != 0)
                    {
                        Health = other.Health;
                    }
                    if (other.Power != 0)
                    {
                        Power = other.Power;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.GlobalCooldown != 0F)
                    {
                        GlobalCooldown = other.GlobalCooldown;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    LastProcessedClientTick = input.ReadInt64();
                                    break;
                                }
                            case 26:
                                {
                                    errors_.AddEntriesFrom(input, _repeated_errors_codec);
                                    break;
                                }
                            case 32:
                                {
                                    Health = input.ReadInt32();
                                    break;
                                }
                            case 40:
                                {
                                    Power = input.ReadInt32();
                                    break;
                                }
                            case 50:
                                {
                                    if (position_ == null)
                                    {
                                        position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(position_);
                                    break;
                                }
                            case 61:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 69:
                                {
                                    GlobalCooldown = input.ReadFloat();
                                    break;
                                }
                            case 74:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class NPC : pb::IMessage<NPC>
            {
                private static readonly pb::MessageParser<NPC> _parser = new pb::MessageParser<NPC>(() => new NPC());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<NPC> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[4]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public NPC()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public NPC(NPC other) : this()
                {
                    id_ = other.id_;
                    health_ = other.health_;
                    power_ = other.power_;
                    Position = other.position_ != null ? other.Position.Clone() : null;
                    rotation_ = other.rotation_;
                    target_ = other.target_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public NPC Clone()
                {
                    return new NPC(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                /// system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "health" field.</summary>
                public const int HealthFieldNumber = 2;
                private int health_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Health
                {
                    get { return health_; }
                    set
                    {
                        health_ = value;
                    }
                }

                /// <summary>Field number for the "power" field.</summary>
                public const int PowerFieldNumber = 3;
                private int power_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Power
                {
                    get { return power_; }
                    set
                    {
                        power_ = value;
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 4;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                /// <summary>
                /// pos
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 5;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 6;
                private string target_ = "";
                /// <summary>
                /// combat
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as NPC);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(NPC other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (Health != other.Health) return false;
                    if (Power != other.Power) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (Rotation != other.Rotation) return false;
                    if (Target != other.Target) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (Health != 0) hash ^= Health.GetHashCode();
                    if (Power != 0) hash ^= Power.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (Health != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(Health);
                    }
                    if (Power != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(Power);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(34);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(45);
                        output.WriteFloat(Rotation);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(50);
                        output.WriteString(Target);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (Health != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
                    }
                    if (Power != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(NPC other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.Health != 0)
                    {
                        Health = other.Health;
                    }
                    if (other.Power != 0)
                    {
                        Power = other.Power;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    Health = input.ReadInt32();
                                    break;
                                }
                            case 24:
                                {
                                    Power = input.ReadInt32();
                                    break;
                                }
                            case 34:
                                {
                                    if (position_ == null)
                                    {
                                        position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(position_);
                                    break;
                                }
                            case 45:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 50:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Projectile : pb::IMessage<Projectile>
            {
                private static readonly pb::MessageParser<Projectile> _parser = new pb::MessageParser<Projectile>(() => new Projectile());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Projectile> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[5]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile(Projectile other) : this()
                {
                    id_ = other.id_;
                    Position = other.position_ != null ? other.Position.Clone() : null;
                    rotation_ = other.rotation_;
                    target_ = other.target_;
                    speed_ = other.speed_;
                    damage_ = other.damage_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile Clone()
                {
                    return new Projectile(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                /// system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 2;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 3;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 4;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "speed" field.</summary>
                public const int SpeedFieldNumber = 5;
                private float speed_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Speed
                {
                    get { return speed_; }
                    set
                    {
                        speed_ = value;
                    }
                }

                /// <summary>Field number for the "damage" field.</summary>
                public const int DamageFieldNumber = 6;
                private int damage_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Damage
                {
                    get { return damage_; }
                    set
                    {
                        damage_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Projectile);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Projectile other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (Rotation != other.Rotation) return false;
                    if (Target != other.Target) return false;
                    if (Speed != other.Speed) return false;
                    if (Damage != other.Damage) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    if (Speed != 0F) hash ^= Speed.GetHashCode();
                    if (Damage != 0) hash ^= Damage.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(18);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(29);
                        output.WriteFloat(Rotation);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(Target);
                    }
                    if (Speed != 0F)
                    {
                        output.WriteRawTag(45);
                        output.WriteFloat(Speed);
                    }
                    if (Damage != 0)
                    {
                        output.WriteRawTag(48);
                        output.WriteInt32(Damage);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    if (Speed != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Damage != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Projectile other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    if (other.Speed != 0F)
                    {
                        Speed = other.Speed;
                    }
                    if (other.Damage != 0)
                    {
                        Damage = other.Damage;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    if (position_ == null)
                                    {
                                        position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(position_);
                                    break;
                                }
                            case 29:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 34:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                            case 45:
                                {
                                    Speed = input.ReadFloat();
                                    break;
                                }
                            case 48:
                                {
                                    Damage = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Vector2Df : pb::IMessage<Vector2Df>
            {
                private static readonly pb::MessageParser<Vector2Df> _parser = new pb::MessageParser<Vector2Df>(() => new Vector2Df());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Vector2Df> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[6]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df(Vector2Df other) : this()
                {
                    x_ = other.x_;
                    y_ = other.y_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df Clone()
                {
                    return new Vector2Df(this);
                }

                /// <summary>Field number for the "x" field.</summary>
                public const int XFieldNumber = 1;
                private float x_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float X
                {
                    get { return x_; }
                    set
                    {
                        x_ = value;
                    }
                }

                /// <summary>Field number for the "y" field.</summary>
                public const int YFieldNumber = 2;
                private float y_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Y
                {
                    get { return y_; }
                    set
                    {
                        y_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Vector2Df);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Vector2Df other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (X != other.X) return false;
                    if (Y != other.Y) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (X != 0F) hash ^= X.GetHashCode();
                    if (Y != 0F) hash ^= Y.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (X != 0F)
                    {
                        output.WriteRawTag(13);
                        output.WriteFloat(X);
                    }
                    if (Y != 0F)
                    {
                        output.WriteRawTag(21);
                        output.WriteFloat(Y);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (X != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Y != 0F)
                    {
                        size += 1 + 4;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Vector2Df other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.X != 0F)
                    {
                        X = other.X;
                    }
                    if (other.Y != 0F)
                    {
                        Y = other.Y;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 13:
                                {
                                    X = input.ReadFloat();
                                    break;
                                }
                            case 21:
                                {
                                    Y = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class Client_Character : pb::IMessage<Client_Character>
    {
        private static readonly pb::MessageParser<Client_Character> _parser = new pb::MessageParser<Client_Character>(() => new Client_Character());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client_Character> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character(Client_Character other) : this()
        {
            clientTick_ = other.clientTick_;
            xAxis_ = other.xAxis_;
            yAxis_ = other.yAxis_;
            rotation_ = other.rotation_;
            target_ = other.target_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character Clone()
        {
            return new Client_Character(this);
        }

        /// <summary>Field number for the "client_tick" field.</summary>
        public const int ClientTickFieldNumber = 1;
        private long clientTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ClientTick
        {
            get { return clientTick_; }
            set
            {
                clientTick_ = value;
            }
        }

        /// <summary>Field number for the "x_axis" field.</summary>
        public const int XAxisFieldNumber = 2;
        private float xAxis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float XAxis
        {
            get { return xAxis_; }
            set
            {
                xAxis_ = value;
            }
        }

        /// <summary>Field number for the "y_axis" field.</summary>
        public const int YAxisFieldNumber = 3;
        private float yAxis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float YAxis
        {
            get { return yAxis_; }
            set
            {
                yAxis_ = value;
            }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private float rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rotation
        {
            get { return rotation_; }
            set
            {
                rotation_ = value;
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 5;
        private string target_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Target
        {
            get { return target_; }
            set
            {
                target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Client_Character);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client_Character other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientTick != other.ClientTick) return false;
            if (XAxis != other.XAxis) return false;
            if (YAxis != other.YAxis) return false;
            if (Rotation != other.Rotation) return false;
            if (Target != other.Target) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
            if (XAxis != 0F) hash ^= XAxis.GetHashCode();
            if (YAxis != 0F) hash ^= YAxis.GetHashCode();
            if (Rotation != 0F) hash ^= Rotation.GetHashCode();
            if (Target.Length != 0) hash ^= Target.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientTick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(ClientTick);
            }
            if (XAxis != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(XAxis);
            }
            if (YAxis != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(YAxis);
            }
            if (Rotation != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(Rotation);
            }
            if (Target.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Target);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientTick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
            }
            if (XAxis != 0F)
            {
                size += 1 + 4;
            }
            if (YAxis != 0F)
            {
                size += 1 + 4;
            }
            if (Rotation != 0F)
            {
                size += 1 + 4;
            }
            if (Target.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client_Character other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientTick != 0L)
            {
                ClientTick = other.ClientTick;
            }
            if (other.XAxis != 0F)
            {
                XAxis = other.XAxis;
            }
            if (other.YAxis != 0F)
            {
                YAxis = other.YAxis;
            }
            if (other.Rotation != 0F)
            {
                Rotation = other.Rotation;
            }
            if (other.Target.Length != 0)
            {
                Target = other.Target;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ClientTick = input.ReadInt64();
                            break;
                        }
                    case 21:
                        {
                            XAxis = input.ReadFloat();
                            break;
                        }
                    case 29:
                        {
                            YAxis = input.ReadFloat();
                            break;
                        }
                    case 37:
                        {
                            Rotation = input.ReadFloat();
                            break;
                        }
                    case 42:
                        {
                            Target = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Client_Cast : pb::IMessage<Client_Cast>
    {
        private static readonly pb::MessageParser<Client_Cast> _parser = new pb::MessageParser<Client_Cast>(() => new Client_Cast());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client_Cast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast(Client_Cast other) : this()
        {
            spellname_ = other.spellname_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast Clone()
        {
            return new Client_Cast(this);
        }

        /// <summary>Field number for the "spellname" field.</summary>
        public const int SpellnameFieldNumber = 1;
        private string spellname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Spellname
        {
            get { return spellname_; }
            set
            {
                spellname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Client_Cast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client_Cast other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Spellname != other.Spellname) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Spellname.Length != 0) hash ^= Spellname.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Spellname.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Spellname);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Spellname.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Spellname);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client_Cast other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Spellname.Length != 0)
            {
                Spellname = other.Spellname;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Spellname = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
