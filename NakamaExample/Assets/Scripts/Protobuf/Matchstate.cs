// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchstate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.PublicMatchState
{

    /// <summary>Holder for reflection information generated from matchstate.proto</summary>
    public static partial class MatchstateReflection
    {

        #region Descriptor
        /// <summary>File descriptor for matchstate.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MatchstateReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChBtYXRjaHN0YXRlLnByb3RvEgRtYWluIokUChBQdWJsaWNNYXRjaFN0YXRl",
                  "EgwKBHRpY2sYASABKAMSOAoJY29tYmF0bG9nGAIgAygLMiUubWFpbi5QdWJs",
                  "aWNNYXRjaFN0YXRlLkNvbWJhdExvZ0VudHJ5Ej4KDGludGVyYWN0YWJsZRgD",
                  "IAMoCzIoLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5JbnRlcmFjdGFibGVFbnRy",
                  "eRI6Cgpwcm9qZWN0aWxlGAQgAygLMiYubWFpbi5QdWJsaWNNYXRjaFN0YXRl",
                  "LlByb2plY3RpbGVFbnRyeRpYChFJbnRlcmFjdGFibGVFbnRyeRILCgNrZXkY",
                  "ASABKAkSMgoFdmFsdWUYAiABKAsyIy5tYWluLlB1YmxpY01hdGNoU3RhdGUu",
                  "SW50ZXJhY3RhYmxlOgI4ARpUCg9Qcm9qZWN0aWxlRW50cnkSCwoDa2V5GAEg",
                  "ASgJEjAKBXZhbHVlGAIgASgLMiEubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlBy",
                  "b2plY3RpbGU6AjgBGqkLCg5Db21iYXRMb2dFbnRyeRIRCgl0aW1lc3RhbXAY",
                  "ASABKAMSEQoJc291cmNlX2lkGAIgASgJEhYKDmRlc3RpbmF0aW9uX2lkGAMg",
                  "ASgJEksKBnNvdXJjZRgEIAEoDjI7Lm1haW4uUHVibGljTWF0Y2hTdGF0ZS5D",
                  "b21iYXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9Tb3VyY2USGQoPc291cmNl",
                  "X3NwZWxsX2lkGAUgASgDSAASGgoQc291cmNlX2VmZmVjdF9pZBgGIAEoA0gA",
                  "Ek0KBmRhbWFnZRgHIAEoCzI7Lm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Db21i",
                  "YXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9EYW1hZ2VIARIQCgZtaXNzZWQY",
                  "CCABKAhIARJXCgtpbnRlcnJ1cHRlZBgJIAEoCzJALm1haW4uUHVibGljTWF0",
                  "Y2hTdGF0ZS5Db21iYXRMb2dFbnRyeS5Db21iYXRMb2dFbnRyeV9JbnRlcnJ1",
                  "cHRlZEgBEkkKBGF1cmEYCiABKAsyOS5tYWluLlB1YmxpY01hdGNoU3RhdGUu",
                  "Q29tYmF0TG9nRW50cnkuQ29tYmF0TG9nRW50cnlfQXVyYUgBEkkKBGNhc3QY",
                  "CyABKAsyOS5tYWluLlB1YmxpY01hdGNoU3RhdGUuQ29tYmF0TG9nRW50cnku",
                  "Q29tYmF0TG9nRW50cnlfQ2FzdEgBEhgKDnN5c3RlbV9tZXNzYWdlGAwgASgJ",
                  "SAEagAEKFUNvbWJhdExvZ0VudHJ5X0RhbWFnZRIOCgZhbW91bnQYASABKAUS",
                  "EAoIcmVzaXN0ZWQYAiABKAUSDwoHYmxvY2tlZBgDIAEoBRIQCghhYnNvcmJl",
                  "ZBgEIAEoBRIQCghjcml0aWNhbBgFIAEoBRIQCghvdmVya2lsbBgGIAEoBRpb",
                  "ChNDb21iYXRMb2dFbnRyeV9IZWFsEg4KBmFtb3VudBgBIAEoBRIQCghhYnNv",
                  "cmJlZBgCIAEoBRIQCghjcml0aWNhbBgDIAEoBRIQCghvdmVyaGVhbBgEIAEo",
                  "BRo6ChpDb21iYXRMb2dFbnRyeV9JbnRlcnJ1cHRlZBIcChRpbnRlcnJ1cHRl",
                  "ZF9zcGVsbF9pZBgBIAEoAxrNAQoTQ29tYmF0TG9nRW50cnlfQXVyYRJiCgVl",
                  "dmVudBgBIAEoDjJTLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5Db21iYXRMb2dF",
                  "bnRyeS5Db21iYXRMb2dFbnRyeV9BdXJhLkNvbWJhdExvZ0VudHJ5X0F1cmFf",
                  "RXZlbnQiUgoZQ29tYmF0TG9nRW50cnlfQXVyYV9FdmVudBILCgdBcHBsaWVk",
                  "EAASCwoHUmVtb3ZlZBABEg0KCVJlZnJlc2hlZBACEgwKCERlcGxldGVkEAMa",
                  "0gEKE0NvbWJhdExvZ0VudHJ5X0Nhc3QSYgoFZXZlbnQYASABKA4yUy5tYWlu",
                  "LlB1YmxpY01hdGNoU3RhdGUuQ29tYmF0TG9nRW50cnkuQ29tYmF0TG9nRW50",
                  "cnlfQ2FzdC5Db21iYXRMb2dFbnRyeV9BdXJhX0V2ZW50EhYKDmZhaWxlZF9t",
                  "ZXNzYWdlGAIgASgJIj8KGUNvbWJhdExvZ0VudHJ5X0F1cmFfRXZlbnQSCQoF",
                  "U3RhcnQQABILCgdTdWNjZXNzEAESCgoGRmFpbGVkEAIaLwocQ29tYmF0TG9n",
                  "RW50cnlfU3lzdGVtTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJIlcKFUNvbWJh",
                  "dExvZ0VudHJ5X1NvdXJjZRIJCgVTd2luZxAAEgkKBVJhbmdlEAESCQoFU3Bl",
                  "bGwQAhIMCghQZXJpb2RpYxADEg8KC0Vudmlyb25tZW50EARCGAoWc291cmNl",
                  "X3NwZWxsX2VmZmVjdF9pZEIGCgR0eXBlGrADCgxJbnRlcmFjdGFibGUSCgoC",
                  "aWQYASABKAkSNgoEdHlwZRgCIAEoDjIoLm1haW4uUHVibGljTWF0Y2hTdGF0",
                  "ZS5JbnRlcmFjdGFibGUuVHlwZRIUCgxjaGFyYWN0ZXJfaWQYAyABKAMSIgoa",
                  "bGFzdF9wcm9jZXNzZWRfY2xpZW50X3RpY2sYBCABKAMSFAoMaW52dWxuZXJh",
                  "YmxlGAYgASgIEhIKCm1heF9oZWFsdGgYByABKAUSEQoJbWF4X3Bvd2VyGAgg",
                  "ASgFEhYKDmN1cnJlbnRfaGVhbHRoGAkgASgFEhUKDWN1cnJlbnRfcG93ZXIY",
                  "CiABKAUSMgoIcG9zaXRpb24YCyABKAsyIC5tYWluLlB1YmxpY01hdGNoU3Rh",
                  "dGUuVmVjdG9yMkRmEhAKCHJvdGF0aW9uGAwgASgCEhcKD2dsb2JhbF9jb29s",
                  "ZG93bhgNIAEoAhIOCgZ0YXJnZXQYDiABKAkSKgoFYXVyYXMYDyADKAsyGy5t",
                  "YWluLlB1YmxpY01hdGNoU3RhdGUuQXVyYSIbCgRUeXBlEgoKBlBsYXllchAA",
                  "EgcKA05QQxABGkMKBEF1cmESFwoPY3JlYXRlZF9hdF90aWNrGAEgASgDEg8K",
                  "B2NyZWF0b3IYAiABKAkSEQoJZWZmZWN0X2lkGAMgASgDGrkBCgpQcm9qZWN0",
                  "aWxlEgoKAmlkGAEgASgJEhAKCHNwZWxsX2lkGAIgASgDEhcKD2NyZWF0ZWRf",
                  "YXRfdGljaxgDIAEoAxIPCgdjcmVhdG9yGAQgASgJEjIKCHBvc2l0aW9uGAUg",
                  "ASgLMiAubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlZlY3RvcjJEZhIQCghyb3Rh",
                  "dGlvbhgGIAEoAhIOCgZ0YXJnZXQYByABKAkSDQoFc3BlZWQYCCABKAIaIQoJ",
                  "VmVjdG9yMkRmEgkKAXgYASABKAISCQoBeRgCIAEoAiJpChBDbGllbnRfQ2hh",
                  "cmFjdGVyEhMKC2NsaWVudF90aWNrGAEgASgDEg4KBnhfYXhpcxgCIAEoAhIO",
                  "CgZ5X2F4aXMYAyABKAISEAoIcm90YXRpb24YBCABKAISDgoGdGFyZ2V0GAUg",
                  "ASgJIh8KC0NsaWVudF9DYXN0EhAKCHNwZWxsX2lkGAEgASgDQiWqAiJOYWth",
                  "bWFNaW5pbWFsR2FtZS5QdWJsaWNNYXRjaFN0YXRlYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Parser, new[]{ "Tick", "Combatlog", "Interactable", "Projectile" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Parser, new[]{ "Timestamp", "SourceId", "DestinationId", "Source", "SourceSpellId", "SourceEffectId", "Damage", "Missed", "Interrupted", "Aura", "Cast", "SystemMessage" }, new[]{ "SourceSpellEffectId", "Type" }, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage.Parser, new[]{ "Amount", "Resisted", "Blocked", "Absorbed", "Critical", "Overkill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Heal), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Heal.Parser, new[]{ "Amount", "Absorbed", "Critical", "Overheal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted.Parser, new[]{ "InterruptedSpellId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Parser, new[]{ "Event" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Parser, new[]{ "Event", "FailedMessage" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_SystemMessage), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_SystemMessage.Parser, new[]{ "Message" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser, new[]{ "Id", "Type", "CharacterId", "LastProcessedClientTick", "Invulnerable", "MaxHealth", "MaxPower", "CurrentHealth", "CurrentPower", "Position", "Rotation", "GlobalCooldown", "Target", "Auras" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura.Parser, new[]{ "CreatedAtTick", "Creator", "EffectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser, new[]{ "Id", "SpellId", "CreatedAtTick", "Creator", "Position", "Rotation", "Target", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df.Parser, new[]{ "X", "Y" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Character), global::NakamaMinimalGame.PublicMatchState.Client_Character.Parser, new[]{ "ClientTick", "XAxis", "YAxis", "Rotation", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Cast), global::NakamaMinimalGame.PublicMatchState.Client_Cast.Parser, new[]{ "SpellId" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class PublicMatchState : pb::IMessage<PublicMatchState>
    {
        private static readonly pb::MessageParser<PublicMatchState> _parser = new pb::MessageParser<PublicMatchState>(() => new PublicMatchState());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PublicMatchState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState(PublicMatchState other) : this()
        {
            tick_ = other.tick_;
            combatlog_ = other.combatlog_.Clone();
            interactable_ = other.interactable_.Clone();
            projectile_ = other.projectile_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicMatchState Clone()
        {
            return new PublicMatchState(this);
        }

        /// <summary>Field number for the "tick" field.</summary>
        public const int TickFieldNumber = 1;
        private long tick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Tick
        {
            get { return tick_; }
            set
            {
                tick_ = value;
            }
        }

        /// <summary>Field number for the "combatlog" field.</summary>
        public const int CombatlogFieldNumber = 2;
        private static readonly pb::FieldCodec<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> _repeated_combatlog_codec
            = pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Parser);
        private readonly pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> combatlog_ = new pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry>();
        /// <summary>
        /// repeated int64 stopwatch = 2;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry> Combatlog
        {
            get { return combatlog_; }
        }

        /// <summary>Field number for the "interactable" field.</summary>
        public const int InteractableFieldNumber = 3;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec _map_interactable_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser), 26);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> interactable_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> Interactable
        {
            get { return interactable_; }
        }

        /// <summary>Field number for the "projectile" field.</summary>
        public const int ProjectileFieldNumber = 4;
        private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec _map_projectile_codec
            = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser), 34);
        private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> projectile_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> Projectile
        {
            get { return projectile_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PublicMatchState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PublicMatchState other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Tick != other.Tick) return false;
            if (!combatlog_.Equals(other.combatlog_)) return false;
            if (!Interactable.Equals(other.Interactable)) return false;
            if (!Projectile.Equals(other.Projectile)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Tick != 0L) hash ^= Tick.GetHashCode();
            hash ^= combatlog_.GetHashCode();
            hash ^= Interactable.GetHashCode();
            hash ^= Projectile.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Tick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Tick);
            }
            combatlog_.WriteTo(output, _repeated_combatlog_codec);
            interactable_.WriteTo(output, _map_interactable_codec);
            projectile_.WriteTo(output, _map_projectile_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Tick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
            }
            size += combatlog_.CalculateSize(_repeated_combatlog_codec);
            size += interactable_.CalculateSize(_map_interactable_codec);
            size += projectile_.CalculateSize(_map_projectile_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PublicMatchState other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Tick != 0L)
            {
                Tick = other.Tick;
            }
            combatlog_.Add(other.combatlog_);
            interactable_.Add(other.interactable_);
            projectile_.Add(other.projectile_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Tick = input.ReadInt64();
                            break;
                        }
                    case 18:
                        {
                            combatlog_.AddEntriesFrom(input, _repeated_combatlog_codec);
                            break;
                        }
                    case 26:
                        {
                            interactable_.AddEntriesFrom(input, _map_interactable_codec);
                            break;
                        }
                    case 34:
                        {
                            projectile_.AddEntriesFrom(input, _map_projectile_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PublicMatchState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            /// https://wow.gamepedia.com/COMBAT_LOG_EVENT_UNFILTERED
            /// </summary>
            public sealed partial class CombatLogEntry : pb::IMessage<CombatLogEntry>
            {
                private static readonly pb::MessageParser<CombatLogEntry> _parser = new pb::MessageParser<CombatLogEntry>(() => new CombatLogEntry());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<CombatLogEntry> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry(CombatLogEntry other) : this()
                {
                    timestamp_ = other.timestamp_;
                    sourceId_ = other.sourceId_;
                    destinationId_ = other.destinationId_;
                    source_ = other.source_;
                    switch (other.SourceSpellEffectIdCase)
                    {
                        case SourceSpellEffectIdOneofCase.SourceSpellId:
                            SourceSpellId = other.SourceSpellId;
                            break;
                        case SourceSpellEffectIdOneofCase.SourceEffectId:
                            SourceEffectId = other.SourceEffectId;
                            break;
                    }

                    switch (other.TypeCase)
                    {
                        case TypeOneofCase.Damage:
                            Damage = other.Damage.Clone();
                            break;
                        case TypeOneofCase.Missed:
                            Missed = other.Missed;
                            break;
                        case TypeOneofCase.Interrupted:
                            Interrupted = other.Interrupted.Clone();
                            break;
                        case TypeOneofCase.Aura:
                            Aura = other.Aura.Clone();
                            break;
                        case TypeOneofCase.Cast:
                            Cast = other.Cast.Clone();
                            break;
                        case TypeOneofCase.SystemMessage:
                            SystemMessage = other.SystemMessage;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public CombatLogEntry Clone()
                {
                    return new CombatLogEntry(this);
                }

                /// <summary>Field number for the "timestamp" field.</summary>
                public const int TimestampFieldNumber = 1;
                private long timestamp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Timestamp
                {
                    get { return timestamp_; }
                    set
                    {
                        timestamp_ = value;
                    }
                }

                /// <summary>Field number for the "source_id" field.</summary>
                public const int SourceIdFieldNumber = 2;
                private string sourceId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SourceId
                {
                    get { return sourceId_; }
                    set
                    {
                        sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "destination_id" field.</summary>
                public const int DestinationIdFieldNumber = 3;
                private string destinationId_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string DestinationId
                {
                    get { return destinationId_; }
                    set
                    {
                        destinationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "source" field.</summary>
                public const int SourceFieldNumber = 4;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source source_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source Source
                {
                    get { return source_; }
                    set
                    {
                        source_ = value;
                    }
                }

                /// <summary>Field number for the "source_spell_id" field.</summary>
                public const int SourceSpellIdFieldNumber = 5;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SourceSpellId
                {
                    get { return sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId ? (long)sourceSpellEffectId_ : 0L; }
                    set
                    {
                        sourceSpellEffectId_ = value;
                        sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.SourceSpellId;
                    }
                }

                /// <summary>Field number for the "source_effect_id" field.</summary>
                public const int SourceEffectIdFieldNumber = 6;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SourceEffectId
                {
                    get { return sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId ? (long)sourceSpellEffectId_ : 0L; }
                    set
                    {
                        sourceSpellEffectId_ = value;
                        sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.SourceEffectId;
                    }
                }

                /// <summary>Field number for the "damage" field.</summary>
                public const int DamageFieldNumber = 7;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage Damage
                {
                    get { return typeCase_ == TypeOneofCase.Damage ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Damage;
                    }
                }

                /// <summary>Field number for the "missed" field.</summary>
                public const int MissedFieldNumber = 8;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Missed
                {
                    get { return typeCase_ == TypeOneofCase.Missed ? (bool)type_ : false; }
                    set
                    {
                        type_ = value;
                        typeCase_ = TypeOneofCase.Missed;
                    }
                }

                /// <summary>Field number for the "interrupted" field.</summary>
                public const int InterruptedFieldNumber = 9;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted Interrupted
                {
                    get { return typeCase_ == TypeOneofCase.Interrupted ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Interrupted;
                    }
                }

                /// <summary>Field number for the "aura" field.</summary>
                public const int AuraFieldNumber = 10;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura Aura
                {
                    get { return typeCase_ == TypeOneofCase.Aura ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Aura;
                    }
                }

                /// <summary>Field number for the "cast" field.</summary>
                public const int CastFieldNumber = 11;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast Cast
                {
                    get { return typeCase_ == TypeOneofCase.Cast ? (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast)type_ : null; }
                    set
                    {
                        type_ = value;
                        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Cast;
                    }
                }

                /// <summary>Field number for the "system_message" field.</summary>
                public const int SystemMessageFieldNumber = 12;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SystemMessage
                {
                    get { return typeCase_ == TypeOneofCase.SystemMessage ? (string)type_ : ""; }
                    set
                    {
                        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        typeCase_ = TypeOneofCase.SystemMessage;
                    }
                }

                private object sourceSpellEffectId_;
                /// <summary>Enum of possible cases for the "source_spell_effect_id" oneof.</summary>
                public enum SourceSpellEffectIdOneofCase
                {
                    None = 0,
                    SourceSpellId = 5,
                    SourceEffectId = 6,
                }
                private SourceSpellEffectIdOneofCase sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SourceSpellEffectIdOneofCase SourceSpellEffectIdCase
                {
                    get { return sourceSpellEffectIdCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSourceSpellEffectId()
                {
                    sourceSpellEffectIdCase_ = SourceSpellEffectIdOneofCase.None;
                    sourceSpellEffectId_ = null;
                }

                private object type_;
                /// <summary>Enum of possible cases for the "type" oneof.</summary>
                public enum TypeOneofCase
                {
                    None = 0,
                    Damage = 7,
                    Missed = 8,
                    Interrupted = 9,
                    Aura = 10,
                    Cast = 11,
                    SystemMessage = 12,
                }
                private TypeOneofCase typeCase_ = TypeOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public TypeOneofCase TypeCase
                {
                    get { return typeCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearType()
                {
                    typeCase_ = TypeOneofCase.None;
                    type_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as CombatLogEntry);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(CombatLogEntry other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Timestamp != other.Timestamp) return false;
                    if (SourceId != other.SourceId) return false;
                    if (DestinationId != other.DestinationId) return false;
                    if (Source != other.Source) return false;
                    if (SourceSpellId != other.SourceSpellId) return false;
                    if (SourceEffectId != other.SourceEffectId) return false;
                    if (!object.Equals(Damage, other.Damage)) return false;
                    if (Missed != other.Missed) return false;
                    if (!object.Equals(Interrupted, other.Interrupted)) return false;
                    if (!object.Equals(Aura, other.Aura)) return false;
                    if (!object.Equals(Cast, other.Cast)) return false;
                    if (SystemMessage != other.SystemMessage) return false;
                    if (SourceSpellEffectIdCase != other.SourceSpellEffectIdCase) return false;
                    if (TypeCase != other.TypeCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
                    if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
                    if (DestinationId.Length != 0) hash ^= DestinationId.GetHashCode();
                    if (Source != 0) hash ^= Source.GetHashCode();
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId) hash ^= SourceSpellId.GetHashCode();
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId) hash ^= SourceEffectId.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Damage) hash ^= Damage.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Missed) hash ^= Missed.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Interrupted) hash ^= Interrupted.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Aura) hash ^= Aura.GetHashCode();
                    if (typeCase_ == TypeOneofCase.Cast) hash ^= Cast.GetHashCode();
                    if (typeCase_ == TypeOneofCase.SystemMessage) hash ^= SystemMessage.GetHashCode();
                    hash ^= (int)sourceSpellEffectIdCase_;
                    hash ^= (int)typeCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Timestamp != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(Timestamp);
                    }
                    if (SourceId.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(SourceId);
                    }
                    if (DestinationId.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(DestinationId);
                    }
                    if (Source != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteEnum((int)Source);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId)
                    {
                        output.WriteRawTag(40);
                        output.WriteInt64(SourceSpellId);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId)
                    {
                        output.WriteRawTag(48);
                        output.WriteInt64(SourceEffectId);
                    }
                    if (typeCase_ == TypeOneofCase.Damage)
                    {
                        output.WriteRawTag(58);
                        output.WriteMessage(Damage);
                    }
                    if (typeCase_ == TypeOneofCase.Missed)
                    {
                        output.WriteRawTag(64);
                        output.WriteBool(Missed);
                    }
                    if (typeCase_ == TypeOneofCase.Interrupted)
                    {
                        output.WriteRawTag(74);
                        output.WriteMessage(Interrupted);
                    }
                    if (typeCase_ == TypeOneofCase.Aura)
                    {
                        output.WriteRawTag(82);
                        output.WriteMessage(Aura);
                    }
                    if (typeCase_ == TypeOneofCase.Cast)
                    {
                        output.WriteRawTag(90);
                        output.WriteMessage(Cast);
                    }
                    if (typeCase_ == TypeOneofCase.SystemMessage)
                    {
                        output.WriteRawTag(98);
                        output.WriteString(SystemMessage);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Timestamp != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
                    }
                    if (SourceId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
                    }
                    if (DestinationId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationId);
                    }
                    if (Source != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Source);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceSpellId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceSpellId);
                    }
                    if (sourceSpellEffectIdCase_ == SourceSpellEffectIdOneofCase.SourceEffectId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceEffectId);
                    }
                    if (typeCase_ == TypeOneofCase.Damage)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damage);
                    }
                    if (typeCase_ == TypeOneofCase.Missed)
                    {
                        size += 1 + 1;
                    }
                    if (typeCase_ == TypeOneofCase.Interrupted)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interrupted);
                    }
                    if (typeCase_ == TypeOneofCase.Aura)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aura);
                    }
                    if (typeCase_ == TypeOneofCase.Cast)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cast);
                    }
                    if (typeCase_ == TypeOneofCase.SystemMessage)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemMessage);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(CombatLogEntry other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Timestamp != 0L)
                    {
                        Timestamp = other.Timestamp;
                    }
                    if (other.SourceId.Length != 0)
                    {
                        SourceId = other.SourceId;
                    }
                    if (other.DestinationId.Length != 0)
                    {
                        DestinationId = other.DestinationId;
                    }
                    if (other.Source != 0)
                    {
                        Source = other.Source;
                    }
                    switch (other.SourceSpellEffectIdCase)
                    {
                        case SourceSpellEffectIdOneofCase.SourceSpellId:
                            SourceSpellId = other.SourceSpellId;
                            break;
                        case SourceSpellEffectIdOneofCase.SourceEffectId:
                            SourceEffectId = other.SourceEffectId;
                            break;
                    }

                    switch (other.TypeCase)
                    {
                        case TypeOneofCase.Damage:
                            Damage = other.Damage;
                            break;
                        case TypeOneofCase.Missed:
                            Missed = other.Missed;
                            break;
                        case TypeOneofCase.Interrupted:
                            Interrupted = other.Interrupted;
                            break;
                        case TypeOneofCase.Aura:
                            Aura = other.Aura;
                            break;
                        case TypeOneofCase.Cast:
                            Cast = other.Cast;
                            break;
                        case TypeOneofCase.SystemMessage:
                            SystemMessage = other.SystemMessage;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    Timestamp = input.ReadInt64();
                                    break;
                                }
                            case 18:
                                {
                                    SourceId = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    DestinationId = input.ReadString();
                                    break;
                                }
                            case 32:
                                {
                                    source_ = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Source)input.ReadEnum();
                                    break;
                                }
                            case 40:
                                {
                                    SourceSpellId = input.ReadInt64();
                                    break;
                                }
                            case 48:
                                {
                                    SourceEffectId = input.ReadInt64();
                                    break;
                                }
                            case 58:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Damage();
                                    if (typeCase_ == TypeOneofCase.Damage)
                                    {
                                        subBuilder.MergeFrom(Damage);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Damage = subBuilder;
                                    break;
                                }
                            case 64:
                                {
                                    Missed = input.ReadBool();
                                    break;
                                }
                            case 74:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Interrupted();
                                    if (typeCase_ == TypeOneofCase.Interrupted)
                                    {
                                        subBuilder.MergeFrom(Interrupted);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Interrupted = subBuilder;
                                    break;
                                }
                            case 82:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura();
                                    if (typeCase_ == TypeOneofCase.Aura)
                                    {
                                        subBuilder.MergeFrom(Aura);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Aura = subBuilder;
                                    break;
                                }
                            case 90:
                                {
                                    global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast subBuilder = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast();
                                    if (typeCase_ == TypeOneofCase.Cast)
                                    {
                                        subBuilder.MergeFrom(Cast);
                                    }
                                    input.ReadMessage(subBuilder);
                                    Cast = subBuilder;
                                    break;
                                }
                            case 98:
                                {
                                    SystemMessage = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the CombatLogEntry message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum CombatLogEntry_Source
                    {
                        [pbr::OriginalName("Swing")] Swing = 0,
                        [pbr::OriginalName("Range")] Range = 1,
                        [pbr::OriginalName("Spell")] Spell = 2,
                        [pbr::OriginalName("Periodic")] Periodic = 3,
                        [pbr::OriginalName("Environment")] Environment = 4,
                    }

                    public sealed partial class CombatLogEntry_Damage : pb::IMessage<CombatLogEntry_Damage>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Damage> _parser = new pb::MessageParser<CombatLogEntry_Damage>(() => new CombatLogEntry_Damage());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Damage> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage(CombatLogEntry_Damage other) : this()
                        {
                            amount_ = other.amount_;
                            resisted_ = other.resisted_;
                            blocked_ = other.blocked_;
                            absorbed_ = other.absorbed_;
                            critical_ = other.critical_;
                            overkill_ = other.overkill_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Damage Clone()
                        {
                            return new CombatLogEntry_Damage(this);
                        }

                        /// <summary>Field number for the "amount" field.</summary>
                        public const int AmountFieldNumber = 1;
                        private int amount_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Amount
                        {
                            get { return amount_; }
                            set
                            {
                                amount_ = value;
                            }
                        }

                        /// <summary>Field number for the "resisted" field.</summary>
                        public const int ResistedFieldNumber = 2;
                        private int resisted_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Resisted
                        {
                            get { return resisted_; }
                            set
                            {
                                resisted_ = value;
                            }
                        }

                        /// <summary>Field number for the "blocked" field.</summary>
                        public const int BlockedFieldNumber = 3;
                        private int blocked_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Blocked
                        {
                            get { return blocked_; }
                            set
                            {
                                blocked_ = value;
                            }
                        }

                        /// <summary>Field number for the "absorbed" field.</summary>
                        public const int AbsorbedFieldNumber = 4;
                        private int absorbed_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Absorbed
                        {
                            get { return absorbed_; }
                            set
                            {
                                absorbed_ = value;
                            }
                        }

                        /// <summary>Field number for the "critical" field.</summary>
                        public const int CriticalFieldNumber = 5;
                        private int critical_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Critical
                        {
                            get { return critical_; }
                            set
                            {
                                critical_ = value;
                            }
                        }

                        /// <summary>Field number for the "overkill" field.</summary>
                        public const int OverkillFieldNumber = 6;
                        private int overkill_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Overkill
                        {
                            get { return overkill_; }
                            set
                            {
                                overkill_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Damage);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Damage other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Amount != other.Amount) return false;
                            if (Resisted != other.Resisted) return false;
                            if (Blocked != other.Blocked) return false;
                            if (Absorbed != other.Absorbed) return false;
                            if (Critical != other.Critical) return false;
                            if (Overkill != other.Overkill) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Amount != 0) hash ^= Amount.GetHashCode();
                            if (Resisted != 0) hash ^= Resisted.GetHashCode();
                            if (Blocked != 0) hash ^= Blocked.GetHashCode();
                            if (Absorbed != 0) hash ^= Absorbed.GetHashCode();
                            if (Critical != 0) hash ^= Critical.GetHashCode();
                            if (Overkill != 0) hash ^= Overkill.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Amount != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteInt32(Amount);
                            }
                            if (Resisted != 0)
                            {
                                output.WriteRawTag(16);
                                output.WriteInt32(Resisted);
                            }
                            if (Blocked != 0)
                            {
                                output.WriteRawTag(24);
                                output.WriteInt32(Blocked);
                            }
                            if (Absorbed != 0)
                            {
                                output.WriteRawTag(32);
                                output.WriteInt32(Absorbed);
                            }
                            if (Critical != 0)
                            {
                                output.WriteRawTag(40);
                                output.WriteInt32(Critical);
                            }
                            if (Overkill != 0)
                            {
                                output.WriteRawTag(48);
                                output.WriteInt32(Overkill);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Amount != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
                            }
                            if (Resisted != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resisted);
                            }
                            if (Blocked != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blocked);
                            }
                            if (Absorbed != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorbed);
                            }
                            if (Critical != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Critical);
                            }
                            if (Overkill != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Overkill);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Damage other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Amount != 0)
                            {
                                Amount = other.Amount;
                            }
                            if (other.Resisted != 0)
                            {
                                Resisted = other.Resisted;
                            }
                            if (other.Blocked != 0)
                            {
                                Blocked = other.Blocked;
                            }
                            if (other.Absorbed != 0)
                            {
                                Absorbed = other.Absorbed;
                            }
                            if (other.Critical != 0)
                            {
                                Critical = other.Critical;
                            }
                            if (other.Overkill != 0)
                            {
                                Overkill = other.Overkill;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            Amount = input.ReadInt32();
                                            break;
                                        }
                                    case 16:
                                        {
                                            Resisted = input.ReadInt32();
                                            break;
                                        }
                                    case 24:
                                        {
                                            Blocked = input.ReadInt32();
                                            break;
                                        }
                                    case 32:
                                        {
                                            Absorbed = input.ReadInt32();
                                            break;
                                        }
                                    case 40:
                                        {
                                            Critical = input.ReadInt32();
                                            break;
                                        }
                                    case 48:
                                        {
                                            Overkill = input.ReadInt32();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Heal : pb::IMessage<CombatLogEntry_Heal>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Heal> _parser = new pb::MessageParser<CombatLogEntry_Heal>(() => new CombatLogEntry_Heal());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Heal> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[1]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal(CombatLogEntry_Heal other) : this()
                        {
                            amount_ = other.amount_;
                            absorbed_ = other.absorbed_;
                            critical_ = other.critical_;
                            overheal_ = other.overheal_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Heal Clone()
                        {
                            return new CombatLogEntry_Heal(this);
                        }

                        /// <summary>Field number for the "amount" field.</summary>
                        public const int AmountFieldNumber = 1;
                        private int amount_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Amount
                        {
                            get { return amount_; }
                            set
                            {
                                amount_ = value;
                            }
                        }

                        /// <summary>Field number for the "absorbed" field.</summary>
                        public const int AbsorbedFieldNumber = 2;
                        private int absorbed_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Absorbed
                        {
                            get { return absorbed_; }
                            set
                            {
                                absorbed_ = value;
                            }
                        }

                        /// <summary>Field number for the "critical" field.</summary>
                        public const int CriticalFieldNumber = 3;
                        private int critical_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Critical
                        {
                            get { return critical_; }
                            set
                            {
                                critical_ = value;
                            }
                        }

                        /// <summary>Field number for the "overheal" field.</summary>
                        public const int OverhealFieldNumber = 4;
                        private int overheal_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Overheal
                        {
                            get { return overheal_; }
                            set
                            {
                                overheal_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Heal);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Heal other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Amount != other.Amount) return false;
                            if (Absorbed != other.Absorbed) return false;
                            if (Critical != other.Critical) return false;
                            if (Overheal != other.Overheal) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Amount != 0) hash ^= Amount.GetHashCode();
                            if (Absorbed != 0) hash ^= Absorbed.GetHashCode();
                            if (Critical != 0) hash ^= Critical.GetHashCode();
                            if (Overheal != 0) hash ^= Overheal.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Amount != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteInt32(Amount);
                            }
                            if (Absorbed != 0)
                            {
                                output.WriteRawTag(16);
                                output.WriteInt32(Absorbed);
                            }
                            if (Critical != 0)
                            {
                                output.WriteRawTag(24);
                                output.WriteInt32(Critical);
                            }
                            if (Overheal != 0)
                            {
                                output.WriteRawTag(32);
                                output.WriteInt32(Overheal);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Amount != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
                            }
                            if (Absorbed != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Absorbed);
                            }
                            if (Critical != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Critical);
                            }
                            if (Overheal != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Overheal);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Heal other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Amount != 0)
                            {
                                Amount = other.Amount;
                            }
                            if (other.Absorbed != 0)
                            {
                                Absorbed = other.Absorbed;
                            }
                            if (other.Critical != 0)
                            {
                                Critical = other.Critical;
                            }
                            if (other.Overheal != 0)
                            {
                                Overheal = other.Overheal;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            Amount = input.ReadInt32();
                                            break;
                                        }
                                    case 16:
                                        {
                                            Absorbed = input.ReadInt32();
                                            break;
                                        }
                                    case 24:
                                        {
                                            Critical = input.ReadInt32();
                                            break;
                                        }
                                    case 32:
                                        {
                                            Overheal = input.ReadInt32();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Interrupted : pb::IMessage<CombatLogEntry_Interrupted>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Interrupted> _parser = new pb::MessageParser<CombatLogEntry_Interrupted>(() => new CombatLogEntry_Interrupted());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Interrupted> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[2]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted(CombatLogEntry_Interrupted other) : this()
                        {
                            interruptedSpellId_ = other.interruptedSpellId_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Interrupted Clone()
                        {
                            return new CombatLogEntry_Interrupted(this);
                        }

                        /// <summary>Field number for the "interrupted_spell_id" field.</summary>
                        public const int InterruptedSpellIdFieldNumber = 1;
                        private long interruptedSpellId_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public long InterruptedSpellId
                        {
                            get { return interruptedSpellId_; }
                            set
                            {
                                interruptedSpellId_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Interrupted);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Interrupted other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (InterruptedSpellId != other.InterruptedSpellId) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (InterruptedSpellId != 0L) hash ^= InterruptedSpellId.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (InterruptedSpellId != 0L)
                            {
                                output.WriteRawTag(8);
                                output.WriteInt64(InterruptedSpellId);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (InterruptedSpellId != 0L)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt64Size(InterruptedSpellId);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Interrupted other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.InterruptedSpellId != 0L)
                            {
                                InterruptedSpellId = other.InterruptedSpellId;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            InterruptedSpellId = input.ReadInt64();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class CombatLogEntry_Aura : pb::IMessage<CombatLogEntry_Aura>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Aura> _parser = new pb::MessageParser<CombatLogEntry_Aura>(() => new CombatLogEntry_Aura());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Aura> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[3]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura(CombatLogEntry_Aura other) : this()
                        {
                            event_ = other.event_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Aura Clone()
                        {
                            return new CombatLogEntry_Aura(this);
                        }

                        /// <summary>Field number for the "event" field.</summary>
                        public const int EventFieldNumber = 1;
                        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event event_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event Event
                        {
                            get { return event_; }
                            set
                            {
                                event_ = value;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Aura);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Aura other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Event != other.Event) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Event != 0) hash ^= Event.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Event != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteEnum((int)Event);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Event != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Aura other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Event != 0)
                            {
                                Event = other.Event;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            event_ = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Aura.Types.CombatLogEntry_Aura_Event)input.ReadEnum();
                                            break;
                                        }
                                }
                            }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatLogEntry_Aura message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types
                        {
                            public enum CombatLogEntry_Aura_Event
                            {
                                [pbr::OriginalName("Applied")] Applied = 0,
                                [pbr::OriginalName("Removed")] Removed = 1,
                                [pbr::OriginalName("Refreshed")] Refreshed = 2,
                                [pbr::OriginalName("Depleted")] Depleted = 3,
                            }

                        }
                        #endregion

                    }

                    public sealed partial class CombatLogEntry_Cast : pb::IMessage<CombatLogEntry_Cast>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_Cast> _parser = new pb::MessageParser<CombatLogEntry_Cast>(() => new CombatLogEntry_Cast());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_Cast> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[4]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast(CombatLogEntry_Cast other) : this()
                        {
                            event_ = other.event_;
                            failedMessage_ = other.failedMessage_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_Cast Clone()
                        {
                            return new CombatLogEntry_Cast(this);
                        }

                        /// <summary>Field number for the "event" field.</summary>
                        public const int EventFieldNumber = 1;
                        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event event_ = 0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event Event
                        {
                            get { return event_; }
                            set
                            {
                                event_ = value;
                            }
                        }

                        /// <summary>Field number for the "failed_message" field.</summary>
                        public const int FailedMessageFieldNumber = 2;
                        private string failedMessage_ = "";
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string FailedMessage
                        {
                            get { return failedMessage_; }
                            set
                            {
                                failedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_Cast);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_Cast other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Event != other.Event) return false;
                            if (FailedMessage != other.FailedMessage) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Event != 0) hash ^= Event.GetHashCode();
                            if (FailedMessage.Length != 0) hash ^= FailedMessage.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Event != 0)
                            {
                                output.WriteRawTag(8);
                                output.WriteEnum((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                output.WriteRawTag(18);
                                output.WriteString(FailedMessage);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Event != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Event);
                            }
                            if (FailedMessage.Length != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(FailedMessage);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_Cast other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Event != 0)
                            {
                                Event = other.Event;
                            }
                            if (other.FailedMessage.Length != 0)
                            {
                                FailedMessage = other.FailedMessage;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            event_ = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Types.CombatLogEntry_Cast.Types.CombatLogEntry_Aura_Event)input.ReadEnum();
                                            break;
                                        }
                                    case 18:
                                        {
                                            FailedMessage = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                        #region Nested types
                        /// <summary>Container for nested types declared in the CombatLogEntry_Cast message type.</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static partial class Types
                        {
                            public enum CombatLogEntry_Aura_Event
                            {
                                [pbr::OriginalName("Start")] Start = 0,
                                [pbr::OriginalName("Success")] Success = 1,
                                [pbr::OriginalName("Failed")] Failed = 2,
                            }

                        }
                        #endregion

                    }

                    public sealed partial class CombatLogEntry_SystemMessage : pb::IMessage<CombatLogEntry_SystemMessage>
                    {
                        private static readonly pb::MessageParser<CombatLogEntry_SystemMessage> _parser = new pb::MessageParser<CombatLogEntry_SystemMessage>(() => new CombatLogEntry_SystemMessage());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<CombatLogEntry_SystemMessage> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.CombatLogEntry.Descriptor.NestedTypes[5]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage(CombatLogEntry_SystemMessage other) : this()
                        {
                            message_ = other.message_;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CombatLogEntry_SystemMessage Clone()
                        {
                            return new CombatLogEntry_SystemMessage(this);
                        }

                        /// <summary>Field number for the "message" field.</summary>
                        public const int MessageFieldNumber = 1;
                        private string message_ = "";
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Message
                        {
                            get { return message_; }
                            set
                            {
                                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as CombatLogEntry_SystemMessage);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(CombatLogEntry_SystemMessage other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Message != other.Message) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (Message.Length != 0) hash ^= Message.GetHashCode();
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (Message.Length != 0)
                            {
                                output.WriteRawTag(10);
                                output.WriteString(Message);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (Message.Length != 0)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(CombatLogEntry_SystemMessage other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.Message.Length != 0)
                            {
                                Message = other.Message;
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 10:
                                        {
                                            Message = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                }
                #endregion

            }

            public sealed partial class Interactable : pb::IMessage<Interactable>
            {
                private static readonly pb::MessageParser<Interactable> _parser = new pb::MessageParser<Interactable>(() => new Interactable());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Interactable> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[3]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable(Interactable other) : this()
                {
                    id_ = other.id_;
                    type_ = other.type_;
                    characterId_ = other.characterId_;
                    lastProcessedClientTick_ = other.lastProcessedClientTick_;
                    invulnerable_ = other.invulnerable_;
                    maxHealth_ = other.maxHealth_;
                    maxPower_ = other.maxPower_;
                    currentHealth_ = other.currentHealth_;
                    currentPower_ = other.currentPower_;
                    Position = other.position_ != null ? other.Position.Clone() : null;
                    rotation_ = other.rotation_;
                    globalCooldown_ = other.globalCooldown_;
                    target_ = other.target_;
                    auras_ = other.auras_.Clone();
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Interactable Clone()
                {
                    return new Interactable(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                /// system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 2;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type type_ = 0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type Type
                {
                    get { return type_; }
                    set
                    {
                        type_ = value;
                    }
                }

                /// <summary>Field number for the "character_id" field.</summary>
                public const int CharacterIdFieldNumber = 3;
                private long characterId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CharacterId
                {
                    get { return characterId_; }
                    set
                    {
                        characterId_ = value;
                    }
                }

                /// <summary>Field number for the "last_processed_client_tick" field.</summary>
                public const int LastProcessedClientTickFieldNumber = 4;
                private long lastProcessedClientTick_;
                /// <summary>
                /// repeated string unused = 5;
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long LastProcessedClientTick
                {
                    get { return lastProcessedClientTick_; }
                    set
                    {
                        lastProcessedClientTick_ = value;
                    }
                }

                /// <summary>Field number for the "invulnerable" field.</summary>
                public const int InvulnerableFieldNumber = 6;
                private bool invulnerable_;
                /// <summary>
                /// vitalities
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Invulnerable
                {
                    get { return invulnerable_; }
                    set
                    {
                        invulnerable_ = value;
                    }
                }

                /// <summary>Field number for the "max_health" field.</summary>
                public const int MaxHealthFieldNumber = 7;
                private int maxHealth_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int MaxHealth
                {
                    get { return maxHealth_; }
                    set
                    {
                        maxHealth_ = value;
                    }
                }

                /// <summary>Field number for the "max_power" field.</summary>
                public const int MaxPowerFieldNumber = 8;
                private int maxPower_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int MaxPower
                {
                    get { return maxPower_; }
                    set
                    {
                        maxPower_ = value;
                    }
                }

                /// <summary>Field number for the "current_health" field.</summary>
                public const int CurrentHealthFieldNumber = 9;
                private int currentHealth_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CurrentHealth
                {
                    get { return currentHealth_; }
                    set
                    {
                        currentHealth_ = value;
                    }
                }

                /// <summary>Field number for the "current_power" field.</summary>
                public const int CurrentPowerFieldNumber = 10;
                private int currentPower_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CurrentPower
                {
                    get { return currentPower_; }
                    set
                    {
                        currentPower_ = value;
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 11;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                /// <summary>
                /// pos
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 12;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "global_cooldown" field.</summary>
                public const int GlobalCooldownFieldNumber = 13;
                private float globalCooldown_;
                /// <summary>
                /// combat
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float GlobalCooldown
                {
                    get { return globalCooldown_; }
                    set
                    {
                        globalCooldown_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 14;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "auras" field.</summary>
                public const int AurasFieldNumber = 15;
                private static readonly pb::FieldCodec<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> _repeated_auras_codec
                    = pb::FieldCodec.ForMessage(122, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura.Parser);
                private readonly pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> auras_ = new pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura>();
                /// <summary>
                /// auras
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Aura> Auras
                {
                    get { return auras_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Interactable);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Interactable other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (Type != other.Type) return false;
                    if (CharacterId != other.CharacterId) return false;
                    if (LastProcessedClientTick != other.LastProcessedClientTick) return false;
                    if (Invulnerable != other.Invulnerable) return false;
                    if (MaxHealth != other.MaxHealth) return false;
                    if (MaxPower != other.MaxPower) return false;
                    if (CurrentHealth != other.CurrentHealth) return false;
                    if (CurrentPower != other.CurrentPower) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (Rotation != other.Rotation) return false;
                    if (GlobalCooldown != other.GlobalCooldown) return false;
                    if (Target != other.Target) return false;
                    if (!auras_.Equals(other.auras_)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (Type != 0) hash ^= Type.GetHashCode();
                    if (CharacterId != 0L) hash ^= CharacterId.GetHashCode();
                    if (LastProcessedClientTick != 0L) hash ^= LastProcessedClientTick.GetHashCode();
                    if (Invulnerable != false) hash ^= Invulnerable.GetHashCode();
                    if (MaxHealth != 0) hash ^= MaxHealth.GetHashCode();
                    if (MaxPower != 0) hash ^= MaxPower.GetHashCode();
                    if (CurrentHealth != 0) hash ^= CurrentHealth.GetHashCode();
                    if (CurrentPower != 0) hash ^= CurrentPower.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
                    if (GlobalCooldown != 0F) hash ^= GlobalCooldown.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    hash ^= auras_.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (Type != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteEnum((int)Type);
                    }
                    if (CharacterId != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(CharacterId);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt64(LastProcessedClientTick);
                    }
                    if (Invulnerable != false)
                    {
                        output.WriteRawTag(48);
                        output.WriteBool(Invulnerable);
                    }
                    if (MaxHealth != 0)
                    {
                        output.WriteRawTag(56);
                        output.WriteInt32(MaxHealth);
                    }
                    if (MaxPower != 0)
                    {
                        output.WriteRawTag(64);
                        output.WriteInt32(MaxPower);
                    }
                    if (CurrentHealth != 0)
                    {
                        output.WriteRawTag(72);
                        output.WriteInt32(CurrentHealth);
                    }
                    if (CurrentPower != 0)
                    {
                        output.WriteRawTag(80);
                        output.WriteInt32(CurrentPower);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(90);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(101);
                        output.WriteFloat(Rotation);
                    }
                    if (GlobalCooldown != 0F)
                    {
                        output.WriteRawTag(109);
                        output.WriteFloat(GlobalCooldown);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(114);
                        output.WriteString(Target);
                    }
                    auras_.WriteTo(output, _repeated_auras_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (Type != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
                    }
                    if (CharacterId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterId);
                    }
                    if (LastProcessedClientTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastProcessedClientTick);
                    }
                    if (Invulnerable != false)
                    {
                        size += 1 + 1;
                    }
                    if (MaxHealth != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHealth);
                    }
                    if (MaxPower != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPower);
                    }
                    if (CurrentHealth != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHealth);
                    }
                    if (CurrentPower != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPower);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (GlobalCooldown != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    size += auras_.CalculateSize(_repeated_auras_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Interactable other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.Type != 0)
                    {
                        Type = other.Type;
                    }
                    if (other.CharacterId != 0L)
                    {
                        CharacterId = other.CharacterId;
                    }
                    if (other.LastProcessedClientTick != 0L)
                    {
                        LastProcessedClientTick = other.LastProcessedClientTick;
                    }
                    if (other.Invulnerable != false)
                    {
                        Invulnerable = other.Invulnerable;
                    }
                    if (other.MaxHealth != 0)
                    {
                        MaxHealth = other.MaxHealth;
                    }
                    if (other.MaxPower != 0)
                    {
                        MaxPower = other.MaxPower;
                    }
                    if (other.CurrentHealth != 0)
                    {
                        CurrentHealth = other.CurrentHealth;
                    }
                    if (other.CurrentPower != 0)
                    {
                        CurrentPower = other.CurrentPower;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.GlobalCooldown != 0F)
                    {
                        GlobalCooldown = other.GlobalCooldown;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    auras_.Add(other.auras_);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    type_ = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type)input.ReadEnum();
                                    break;
                                }
                            case 24:
                                {
                                    CharacterId = input.ReadInt64();
                                    break;
                                }
                            case 32:
                                {
                                    LastProcessedClientTick = input.ReadInt64();
                                    break;
                                }
                            case 48:
                                {
                                    Invulnerable = input.ReadBool();
                                    break;
                                }
                            case 56:
                                {
                                    MaxHealth = input.ReadInt32();
                                    break;
                                }
                            case 64:
                                {
                                    MaxPower = input.ReadInt32();
                                    break;
                                }
                            case 72:
                                {
                                    CurrentHealth = input.ReadInt32();
                                    break;
                                }
                            case 80:
                                {
                                    CurrentPower = input.ReadInt32();
                                    break;
                                }
                            case 90:
                                {
                                    if (position_ == null)
                                    {
                                        position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(position_);
                                    break;
                                }
                            case 101:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 109:
                                {
                                    GlobalCooldown = input.ReadFloat();
                                    break;
                                }
                            case 114:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                            case 122:
                                {
                                    auras_.AddEntriesFrom(input, _repeated_auras_codec);
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Interactable message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum Type
                    {
                        [pbr::OriginalName("Player")] Player = 0,
                        [pbr::OriginalName("NPC")] Npc = 1,
                    }

                }
                #endregion

            }

            public sealed partial class Aura : pb::IMessage<Aura>
            {
                private static readonly pb::MessageParser<Aura> _parser = new pb::MessageParser<Aura>(() => new Aura());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Aura> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[4]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura(Aura other) : this()
                {
                    createdAtTick_ = other.createdAtTick_;
                    creator_ = other.creator_;
                    effectId_ = other.effectId_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Aura Clone()
                {
                    return new Aura(this);
                }

                /// <summary>Field number for the "created_at_tick" field.</summary>
                public const int CreatedAtTickFieldNumber = 1;
                private long createdAtTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CreatedAtTick
                {
                    get { return createdAtTick_; }
                    set
                    {
                        createdAtTick_ = value;
                    }
                }

                /// <summary>Field number for the "creator" field.</summary>
                public const int CreatorFieldNumber = 2;
                private string creator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Creator
                {
                    get { return creator_; }
                    set
                    {
                        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "effect_id" field.</summary>
                public const int EffectIdFieldNumber = 3;
                private long effectId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long EffectId
                {
                    get { return effectId_; }
                    set
                    {
                        effectId_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Aura);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Aura other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (CreatedAtTick != other.CreatedAtTick) return false;
                    if (Creator != other.Creator) return false;
                    if (EffectId != other.EffectId) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (CreatedAtTick != 0L) hash ^= CreatedAtTick.GetHashCode();
                    if (Creator.Length != 0) hash ^= Creator.GetHashCode();
                    if (EffectId != 0L) hash ^= EffectId.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (CreatedAtTick != 0L)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt64(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(Creator);
                    }
                    if (EffectId != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(EffectId);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (CreatedAtTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
                    }
                    if (EffectId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EffectId);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Aura other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.CreatedAtTick != 0L)
                    {
                        CreatedAtTick = other.CreatedAtTick;
                    }
                    if (other.Creator.Length != 0)
                    {
                        Creator = other.Creator;
                    }
                    if (other.EffectId != 0L)
                    {
                        EffectId = other.EffectId;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    CreatedAtTick = input.ReadInt64();
                                    break;
                                }
                            case 18:
                                {
                                    Creator = input.ReadString();
                                    break;
                                }
                            case 24:
                                {
                                    EffectId = input.ReadInt64();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Projectile : pb::IMessage<Projectile>
            {
                private static readonly pb::MessageParser<Projectile> _parser = new pb::MessageParser<Projectile>(() => new Projectile());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Projectile> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[5]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile(Projectile other) : this()
                {
                    id_ = other.id_;
                    spellId_ = other.spellId_;
                    createdAtTick_ = other.createdAtTick_;
                    creator_ = other.creator_;
                    Position = other.position_ != null ? other.Position.Clone() : null;
                    rotation_ = other.rotation_;
                    target_ = other.target_;
                    speed_ = other.speed_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Projectile Clone()
                {
                    return new Projectile(this);
                }

                /// <summary>Field number for the "id" field.</summary>
                public const int IdFieldNumber = 1;
                private string id_ = "";
                /// <summary>
                /// system
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Id
                {
                    get { return id_; }
                    set
                    {
                        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "spell_id" field.</summary>
                public const int SpellIdFieldNumber = 2;
                private long spellId_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long SpellId
                {
                    get { return spellId_; }
                    set
                    {
                        spellId_ = value;
                    }
                }

                /// <summary>Field number for the "created_at_tick" field.</summary>
                public const int CreatedAtTickFieldNumber = 3;
                private long createdAtTick_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long CreatedAtTick
                {
                    get { return createdAtTick_; }
                    set
                    {
                        createdAtTick_ = value;
                    }
                }

                /// <summary>Field number for the "creator" field.</summary>
                public const int CreatorFieldNumber = 4;
                private string creator_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Creator
                {
                    get { return creator_; }
                    set
                    {
                        creator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "position" field.</summary>
                public const int PositionFieldNumber = 5;
                private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position
                {
                    get { return position_; }
                    set
                    {
                        position_ = value;
                    }
                }

                /// <summary>Field number for the "rotation" field.</summary>
                public const int RotationFieldNumber = 6;
                private float rotation_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Rotation
                {
                    get { return rotation_; }
                    set
                    {
                        rotation_ = value;
                    }
                }

                /// <summary>Field number for the "target" field.</summary>
                public const int TargetFieldNumber = 7;
                private string target_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Target
                {
                    get { return target_; }
                    set
                    {
                        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "speed" field.</summary>
                public const int SpeedFieldNumber = 8;
                private float speed_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Speed
                {
                    get { return speed_; }
                    set
                    {
                        speed_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Projectile);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Projectile other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Id != other.Id) return false;
                    if (SpellId != other.SpellId) return false;
                    if (CreatedAtTick != other.CreatedAtTick) return false;
                    if (Creator != other.Creator) return false;
                    if (!object.Equals(Position, other.Position)) return false;
                    if (Rotation != other.Rotation) return false;
                    if (Target != other.Target) return false;
                    if (Speed != other.Speed) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Id.Length != 0) hash ^= Id.GetHashCode();
                    if (SpellId != 0L) hash ^= SpellId.GetHashCode();
                    if (CreatedAtTick != 0L) hash ^= CreatedAtTick.GetHashCode();
                    if (Creator.Length != 0) hash ^= Creator.GetHashCode();
                    if (position_ != null) hash ^= Position.GetHashCode();
                    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
                    if (Target.Length != 0) hash ^= Target.GetHashCode();
                    if (Speed != 0F) hash ^= Speed.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Id.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Id);
                    }
                    if (SpellId != 0L)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(SpellId);
                    }
                    if (CreatedAtTick != 0L)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt64(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(Creator);
                    }
                    if (position_ != null)
                    {
                        output.WriteRawTag(42);
                        output.WriteMessage(Position);
                    }
                    if (Rotation != 0F)
                    {
                        output.WriteRawTag(53);
                        output.WriteFloat(Rotation);
                    }
                    if (Target.Length != 0)
                    {
                        output.WriteRawTag(58);
                        output.WriteString(Target);
                    }
                    if (Speed != 0F)
                    {
                        output.WriteRawTag(69);
                        output.WriteFloat(Speed);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Id.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                    }
                    if (SpellId != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
                    }
                    if (CreatedAtTick != 0L)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAtTick);
                    }
                    if (Creator.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Creator);
                    }
                    if (position_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
                    }
                    if (Rotation != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Target.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
                    }
                    if (Speed != 0F)
                    {
                        size += 1 + 4;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Projectile other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Id.Length != 0)
                    {
                        Id = other.Id;
                    }
                    if (other.SpellId != 0L)
                    {
                        SpellId = other.SpellId;
                    }
                    if (other.CreatedAtTick != 0L)
                    {
                        CreatedAtTick = other.CreatedAtTick;
                    }
                    if (other.Creator.Length != 0)
                    {
                        Creator = other.Creator;
                    }
                    if (other.position_ != null)
                    {
                        if (position_ == null)
                        {
                            position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                        }
                        Position.MergeFrom(other.Position);
                    }
                    if (other.Rotation != 0F)
                    {
                        Rotation = other.Rotation;
                    }
                    if (other.Target.Length != 0)
                    {
                        Target = other.Target;
                    }
                    if (other.Speed != 0F)
                    {
                        Speed = other.Speed;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Id = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    SpellId = input.ReadInt64();
                                    break;
                                }
                            case 24:
                                {
                                    CreatedAtTick = input.ReadInt64();
                                    break;
                                }
                            case 34:
                                {
                                    Creator = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    if (position_ == null)
                                    {
                                        position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                                    }
                                    input.ReadMessage(position_);
                                    break;
                                }
                            case 53:
                                {
                                    Rotation = input.ReadFloat();
                                    break;
                                }
                            case 58:
                                {
                                    Target = input.ReadString();
                                    break;
                                }
                            case 69:
                                {
                                    Speed = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class Vector2Df : pb::IMessage<Vector2Df>
            {
                private static readonly pb::MessageParser<Vector2Df> _parser = new pb::MessageParser<Vector2Df>(() => new Vector2Df());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Vector2Df> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[6]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df(Vector2Df other) : this()
                {
                    x_ = other.x_;
                    y_ = other.y_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Vector2Df Clone()
                {
                    return new Vector2Df(this);
                }

                /// <summary>Field number for the "x" field.</summary>
                public const int XFieldNumber = 1;
                private float x_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float X
                {
                    get { return x_; }
                    set
                    {
                        x_ = value;
                    }
                }

                /// <summary>Field number for the "y" field.</summary>
                public const int YFieldNumber = 2;
                private float y_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float Y
                {
                    get { return y_; }
                    set
                    {
                        y_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Vector2Df);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Vector2Df other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (X != other.X) return false;
                    if (Y != other.Y) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (X != 0F) hash ^= X.GetHashCode();
                    if (Y != 0F) hash ^= Y.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (X != 0F)
                    {
                        output.WriteRawTag(13);
                        output.WriteFloat(X);
                    }
                    if (Y != 0F)
                    {
                        output.WriteRawTag(21);
                        output.WriteFloat(Y);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (X != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Y != 0F)
                    {
                        size += 1 + 4;
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Vector2Df other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.X != 0F)
                    {
                        X = other.X;
                    }
                    if (other.Y != 0F)
                    {
                        Y = other.Y;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 13:
                                {
                                    X = input.ReadFloat();
                                    break;
                                }
                            case 21:
                                {
                                    Y = input.ReadFloat();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class Client_Character : pb::IMessage<Client_Character>
    {
        private static readonly pb::MessageParser<Client_Character> _parser = new pb::MessageParser<Client_Character>(() => new Client_Character());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client_Character> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character(Client_Character other) : this()
        {
            clientTick_ = other.clientTick_;
            xAxis_ = other.xAxis_;
            yAxis_ = other.yAxis_;
            rotation_ = other.rotation_;
            target_ = other.target_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Character Clone()
        {
            return new Client_Character(this);
        }

        /// <summary>Field number for the "client_tick" field.</summary>
        public const int ClientTickFieldNumber = 1;
        private long clientTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ClientTick
        {
            get { return clientTick_; }
            set
            {
                clientTick_ = value;
            }
        }

        /// <summary>Field number for the "x_axis" field.</summary>
        public const int XAxisFieldNumber = 2;
        private float xAxis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float XAxis
        {
            get { return xAxis_; }
            set
            {
                xAxis_ = value;
            }
        }

        /// <summary>Field number for the "y_axis" field.</summary>
        public const int YAxisFieldNumber = 3;
        private float yAxis_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float YAxis
        {
            get { return yAxis_; }
            set
            {
                yAxis_ = value;
            }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 4;
        private float rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rotation
        {
            get { return rotation_; }
            set
            {
                rotation_ = value;
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 5;
        private string target_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Target
        {
            get { return target_; }
            set
            {
                target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Client_Character);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client_Character other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ClientTick != other.ClientTick) return false;
            if (XAxis != other.XAxis) return false;
            if (YAxis != other.YAxis) return false;
            if (Rotation != other.Rotation) return false;
            if (Target != other.Target) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
            if (XAxis != 0F) hash ^= XAxis.GetHashCode();
            if (YAxis != 0F) hash ^= YAxis.GetHashCode();
            if (Rotation != 0F) hash ^= Rotation.GetHashCode();
            if (Target.Length != 0) hash ^= Target.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ClientTick != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(ClientTick);
            }
            if (XAxis != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(XAxis);
            }
            if (YAxis != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(YAxis);
            }
            if (Rotation != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(Rotation);
            }
            if (Target.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(Target);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ClientTick != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
            }
            if (XAxis != 0F)
            {
                size += 1 + 4;
            }
            if (YAxis != 0F)
            {
                size += 1 + 4;
            }
            if (Rotation != 0F)
            {
                size += 1 + 4;
            }
            if (Target.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client_Character other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ClientTick != 0L)
            {
                ClientTick = other.ClientTick;
            }
            if (other.XAxis != 0F)
            {
                XAxis = other.XAxis;
            }
            if (other.YAxis != 0F)
            {
                YAxis = other.YAxis;
            }
            if (other.Rotation != 0F)
            {
                Rotation = other.Rotation;
            }
            if (other.Target.Length != 0)
            {
                Target = other.Target;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            ClientTick = input.ReadInt64();
                            break;
                        }
                    case 21:
                        {
                            XAxis = input.ReadFloat();
                            break;
                        }
                    case 29:
                        {
                            YAxis = input.ReadFloat();
                            break;
                        }
                    case 37:
                        {
                            Rotation = input.ReadFloat();
                            break;
                        }
                    case 42:
                        {
                            Target = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Client_Cast : pb::IMessage<Client_Cast>
    {
        private static readonly pb::MessageParser<Client_Cast> _parser = new pb::MessageParser<Client_Cast>(() => new Client_Cast());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client_Cast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast(Client_Cast other) : this()
        {
            spellId_ = other.spellId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client_Cast Clone()
        {
            return new Client_Cast(this);
        }

        /// <summary>Field number for the "spell_id" field.</summary>
        public const int SpellIdFieldNumber = 1;
        private long spellId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SpellId
        {
            get { return spellId_; }
            set
            {
                spellId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Client_Cast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client_Cast other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SpellId != other.SpellId) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SpellId != 0L) hash ^= SpellId.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SpellId != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(SpellId);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SpellId != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client_Cast other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SpellId != 0L)
            {
                SpellId = other.SpellId;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            SpellId = input.ReadInt64();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
