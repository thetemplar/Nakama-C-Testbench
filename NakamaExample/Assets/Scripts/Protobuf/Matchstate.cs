// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: matchstate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.PublicMatchState {

  /// <summary>Holder for reflection information generated from matchstate.proto</summary>
  public static partial class MatchstateReflection {

    #region Descriptor
    /// <summary>File descriptor for matchstate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchstateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtYXRjaHN0YXRlLnByb3RvEgRtYWluIsQHChBQdWJsaWNNYXRjaFN0YXRl",
            "EgwKBHRpY2sYASABKAMSEQoJc3RvcHdhdGNoGAIgAygDEj4KDGludGVyYWN0",
            "YWJsZRgDIAMoCzIoLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5JbnRlcmFjdGFi",
            "bGVFbnRyeRI6Cgpwcm9qZWN0aWxlGAQgAygLMiYubWFpbi5QdWJsaWNNYXRj",
            "aFN0YXRlLlByb2plY3RpbGVFbnRyeRpYChFJbnRlcmFjdGFibGVFbnRyeRIL",
            "CgNrZXkYASABKAkSMgoFdmFsdWUYAiABKAsyIy5tYWluLlB1YmxpY01hdGNo",
            "U3RhdGUuSW50ZXJhY3RhYmxlOgI4ARpUCg9Qcm9qZWN0aWxlRW50cnkSCwoD",
            "a2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEubWFpbi5QdWJsaWNNYXRjaFN0",
            "YXRlLlByb2plY3RpbGU6AjgBGpQDCgxJbnRlcmFjdGFibGUSCgoCaWQYASAB",
            "KAkSNgoEdHlwZRgCIAEoDjIoLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5JbnRl",
            "cmFjdGFibGUuVHlwZRIUCgxjaGFyYWN0ZXJfaWQYAyABKAMSIgoabGFzdF9w",
            "cm9jZXNzZWRfY2xpZW50X3RpY2sYBCABKAMSDgoGZXJyb3JzGAUgAygJEhQK",
            "DGludnVsbmVyYWJsZRgGIAEoCBISCgptYXhfaGVhbHRoGAcgASgFEhEKCW1h",
            "eF9wb3dlchgIIAEoBRIWCg5jdXJyZW50X2hlYWx0aBgJIAEoBRIVCg1jdXJy",
            "ZW50X3Bvd2VyGAogASgFEjIKCHBvc2l0aW9uGAsgASgLMiAubWFpbi5QdWJs",
            "aWNNYXRjaFN0YXRlLlZlY3RvcjJEZhIQCghyb3RhdGlvbhgMIAEoAhIXCg9n",
            "bG9iYWxfY29vbGRvd24YDSABKAISDgoGdGFyZ2V0GA4gASgJIhsKBFR5cGUS",
            "CgoGUGxheWVyEAASBwoDTlBDEAEaqAEKClByb2plY3RpbGUSCgoCaWQYASAB",
            "KAkSEAoIc3BlbGxfaWQYAiABKAMSFwoPY3JlYXRlZF9hdF90aWNrGAMgASgD",
            "EjIKCHBvc2l0aW9uGAQgASgLMiAubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlZl",
            "Y3RvcjJEZhIQCghyb3RhdGlvbhgFIAEoAhIOCgZ0YXJnZXQYBiABKAkSDQoF",
            "c3BlZWQYByABKAIaIQoJVmVjdG9yMkRmEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AiJpChBDbGllbnRfQ2hhcmFjdGVyEhMKC2NsaWVudF90aWNrGAEgASgDEg4K",
            "BnhfYXhpcxgCIAEoAhIOCgZ5X2F4aXMYAyABKAISEAoIcm90YXRpb24YBCAB",
            "KAISDgoGdGFyZ2V0GAUgASgJIh8KC0NsaWVudF9DYXN0EhAKCHNwZWxsX2lk",
            "GAEgASgDQiWqAiJOYWthbWFNaW5pbWFsR2FtZS5QdWJsaWNNYXRjaFN0YXRl",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Parser, new[]{ "Tick", "Stopwatch", "Interactable", "Projectile" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser, new[]{ "Id", "Type", "CharacterId", "LastProcessedClientTick", "Errors", "Invulnerable", "MaxHealth", "MaxPower", "CurrentHealth", "CurrentPower", "Position", "Rotation", "GlobalCooldown", "Target" }, null, new[]{ typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser, new[]{ "Id", "SpellId", "CreatedAtTick", "Position", "Rotation", "Target", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df.Parser, new[]{ "X", "Y" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Character), global::NakamaMinimalGame.PublicMatchState.Client_Character.Parser, new[]{ "ClientTick", "XAxis", "YAxis", "Rotation", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.Client_Cast), global::NakamaMinimalGame.PublicMatchState.Client_Cast.Parser, new[]{ "SpellId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PublicMatchState : pb::IMessage<PublicMatchState> {
    private static readonly pb::MessageParser<PublicMatchState> _parser = new pb::MessageParser<PublicMatchState>(() => new PublicMatchState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicMatchState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState(PublicMatchState other) : this() {
      tick_ = other.tick_;
      stopwatch_ = other.stopwatch_.Clone();
      interactable_ = other.interactable_.Clone();
      projectile_ = other.projectile_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState Clone() {
      return new PublicMatchState(this);
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "stopwatch" field.</summary>
    public const int StopwatchFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_stopwatch_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> stopwatch_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Stopwatch {
      get { return stopwatch_; }
    }

    /// <summary>Field number for the "interactable" field.</summary>
    public const int InteractableFieldNumber = 3;
    private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec _map_interactable_codec
        = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Parser), 26);
    private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> interactable_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable> Interactable {
      get { return interactable_; }
    }

    /// <summary>Field number for the "projectile" field.</summary>
    public const int ProjectileFieldNumber = 4;
    private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec _map_projectile_codec
        = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile.Parser), 34);
    private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> projectile_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Projectile> Projectile {
      get { return projectile_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicMatchState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicMatchState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tick != other.Tick) return false;
      if(!stopwatch_.Equals(other.stopwatch_)) return false;
      if (!Interactable.Equals(other.Interactable)) return false;
      if (!Projectile.Equals(other.Projectile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tick != 0L) hash ^= Tick.GetHashCode();
      hash ^= stopwatch_.GetHashCode();
      hash ^= Interactable.GetHashCode();
      hash ^= Projectile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Tick);
      }
      stopwatch_.WriteTo(output, _repeated_stopwatch_codec);
      interactable_.WriteTo(output, _map_interactable_codec);
      projectile_.WriteTo(output, _map_projectile_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      size += stopwatch_.CalculateSize(_repeated_stopwatch_codec);
      size += interactable_.CalculateSize(_map_interactable_codec);
      size += projectile_.CalculateSize(_map_projectile_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicMatchState other) {
      if (other == null) {
        return;
      }
      if (other.Tick != 0L) {
        Tick = other.Tick;
      }
      stopwatch_.Add(other.stopwatch_);
      interactable_.Add(other.interactable_);
      projectile_.Add(other.projectile_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tick = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            stopwatch_.AddEntriesFrom(input, _repeated_stopwatch_codec);
            break;
          }
          case 26: {
            interactable_.AddEntriesFrom(input, _map_interactable_codec);
            break;
          }
          case 34: {
            projectile_.AddEntriesFrom(input, _map_projectile_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PublicMatchState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Interactable : pb::IMessage<Interactable> {
        private static readonly pb::MessageParser<Interactable> _parser = new pb::MessageParser<Interactable>(() => new Interactable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Interactable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interactable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interactable(Interactable other) : this() {
          id_ = other.id_;
          type_ = other.type_;
          characterId_ = other.characterId_;
          lastProcessedClientTick_ = other.lastProcessedClientTick_;
          errors_ = other.errors_.Clone();
          invulnerable_ = other.invulnerable_;
          maxHealth_ = other.maxHealth_;
          maxPower_ = other.maxPower_;
          currentHealth_ = other.currentHealth_;
          currentPower_ = other.currentPower_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          rotation_ = other.rotation_;
          globalCooldown_ = other.globalCooldown_;
          target_ = other.target_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interactable Clone() {
          return new Interactable(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        ///system
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "character_id" field.</summary>
        public const int CharacterIdFieldNumber = 3;
        private long characterId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CharacterId {
          get { return characterId_; }
          set {
            characterId_ = value;
          }
        }

        /// <summary>Field number for the "last_processed_client_tick" field.</summary>
        public const int LastProcessedClientTickFieldNumber = 4;
        private long lastProcessedClientTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastProcessedClientTick {
          get { return lastProcessedClientTick_; }
          set {
            lastProcessedClientTick_ = value;
          }
        }

        /// <summary>Field number for the "errors" field.</summary>
        public const int ErrorsFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_errors_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Errors {
          get { return errors_; }
        }

        /// <summary>Field number for the "invulnerable" field.</summary>
        public const int InvulnerableFieldNumber = 6;
        private bool invulnerable_;
        /// <summary>
        ///vitalities
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Invulnerable {
          get { return invulnerable_; }
          set {
            invulnerable_ = value;
          }
        }

        /// <summary>Field number for the "max_health" field.</summary>
        public const int MaxHealthFieldNumber = 7;
        private int maxHealth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxHealth {
          get { return maxHealth_; }
          set {
            maxHealth_ = value;
          }
        }

        /// <summary>Field number for the "max_power" field.</summary>
        public const int MaxPowerFieldNumber = 8;
        private int maxPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxPower {
          get { return maxPower_; }
          set {
            maxPower_ = value;
          }
        }

        /// <summary>Field number for the "current_health" field.</summary>
        public const int CurrentHealthFieldNumber = 9;
        private int currentHealth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentHealth {
          get { return currentHealth_; }
          set {
            currentHealth_ = value;
          }
        }

        /// <summary>Field number for the "current_power" field.</summary>
        public const int CurrentPowerFieldNumber = 10;
        private int currentPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CurrentPower {
          get { return currentPower_; }
          set {
            currentPower_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 11;
        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
        /// <summary>
        ///pos
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 12;
        private float rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        /// <summary>Field number for the "global_cooldown" field.</summary>
        public const int GlobalCooldownFieldNumber = 13;
        private float globalCooldown_;
        /// <summary>
        ///combat
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float GlobalCooldown {
          get { return globalCooldown_; }
          set {
            globalCooldown_ = value;
          }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 14;
        private string target_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Target {
          get { return target_; }
          set {
            target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Interactable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Interactable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Type != other.Type) return false;
          if (CharacterId != other.CharacterId) return false;
          if (LastProcessedClientTick != other.LastProcessedClientTick) return false;
          if(!errors_.Equals(other.errors_)) return false;
          if (Invulnerable != other.Invulnerable) return false;
          if (MaxHealth != other.MaxHealth) return false;
          if (MaxPower != other.MaxPower) return false;
          if (CurrentHealth != other.CurrentHealth) return false;
          if (CurrentPower != other.CurrentPower) return false;
          if (!object.Equals(Position, other.Position)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GlobalCooldown, other.GlobalCooldown)) return false;
          if (Target != other.Target) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (CharacterId != 0L) hash ^= CharacterId.GetHashCode();
          if (LastProcessedClientTick != 0L) hash ^= LastProcessedClientTick.GetHashCode();
          hash ^= errors_.GetHashCode();
          if (Invulnerable != false) hash ^= Invulnerable.GetHashCode();
          if (MaxHealth != 0) hash ^= MaxHealth.GetHashCode();
          if (MaxPower != 0) hash ^= MaxPower.GetHashCode();
          if (CurrentHealth != 0) hash ^= CurrentHealth.GetHashCode();
          if (CurrentPower != 0) hash ^= CurrentPower.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
          if (GlobalCooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GlobalCooldown);
          if (Target.Length != 0) hash ^= Target.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (CharacterId != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(CharacterId);
          }
          if (LastProcessedClientTick != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LastProcessedClientTick);
          }
          errors_.WriteTo(output, _repeated_errors_codec);
          if (Invulnerable != false) {
            output.WriteRawTag(48);
            output.WriteBool(Invulnerable);
          }
          if (MaxHealth != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MaxHealth);
          }
          if (MaxPower != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(MaxPower);
          }
          if (CurrentHealth != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(CurrentHealth);
          }
          if (CurrentPower != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(CurrentPower);
          }
          if (position_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(Position);
          }
          if (Rotation != 0F) {
            output.WriteRawTag(101);
            output.WriteFloat(Rotation);
          }
          if (GlobalCooldown != 0F) {
            output.WriteRawTag(109);
            output.WriteFloat(GlobalCooldown);
          }
          if (Target.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(Target);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (CharacterId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterId);
          }
          if (LastProcessedClientTick != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastProcessedClientTick);
          }
          size += errors_.CalculateSize(_repeated_errors_codec);
          if (Invulnerable != false) {
            size += 1 + 1;
          }
          if (MaxHealth != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHealth);
          }
          if (MaxPower != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPower);
          }
          if (CurrentHealth != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHealth);
          }
          if (CurrentPower != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPower);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (Rotation != 0F) {
            size += 1 + 4;
          }
          if (GlobalCooldown != 0F) {
            size += 1 + 4;
          }
          if (Target.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Interactable other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.CharacterId != 0L) {
            CharacterId = other.CharacterId;
          }
          if (other.LastProcessedClientTick != 0L) {
            LastProcessedClientTick = other.LastProcessedClientTick;
          }
          errors_.Add(other.errors_);
          if (other.Invulnerable != false) {
            Invulnerable = other.Invulnerable;
          }
          if (other.MaxHealth != 0) {
            MaxHealth = other.MaxHealth;
          }
          if (other.MaxPower != 0) {
            MaxPower = other.MaxPower;
          }
          if (other.CurrentHealth != 0) {
            CurrentHealth = other.CurrentHealth;
          }
          if (other.CurrentPower != 0) {
            CurrentPower = other.CurrentPower;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
            }
            Position.MergeFrom(other.Position);
          }
          if (other.Rotation != 0F) {
            Rotation = other.Rotation;
          }
          if (other.GlobalCooldown != 0F) {
            GlobalCooldown = other.GlobalCooldown;
          }
          if (other.Target.Length != 0) {
            Target = other.Target;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Interactable.Types.Type) input.ReadEnum();
                break;
              }
              case 24: {
                CharacterId = input.ReadInt64();
                break;
              }
              case 32: {
                LastProcessedClientTick = input.ReadInt64();
                break;
              }
              case 42: {
                errors_.AddEntriesFrom(input, _repeated_errors_codec);
                break;
              }
              case 48: {
                Invulnerable = input.ReadBool();
                break;
              }
              case 56: {
                MaxHealth = input.ReadInt32();
                break;
              }
              case 64: {
                MaxPower = input.ReadInt32();
                break;
              }
              case 72: {
                CurrentHealth = input.ReadInt32();
                break;
              }
              case 80: {
                CurrentPower = input.ReadInt32();
                break;
              }
              case 90: {
                if (position_ == null) {
                  position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                }
                input.ReadMessage(position_);
                break;
              }
              case 101: {
                Rotation = input.ReadFloat();
                break;
              }
              case 109: {
                GlobalCooldown = input.ReadFloat();
                break;
              }
              case 114: {
                Target = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Interactable message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("Player")] Player = 0,
            [pbr::OriginalName("NPC")] Npc = 1,
          }

        }
        #endregion

      }

      public sealed partial class Projectile : pb::IMessage<Projectile> {
        private static readonly pb::MessageParser<Projectile> _parser = new pb::MessageParser<Projectile>(() => new Projectile());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Projectile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projectile() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projectile(Projectile other) : this() {
          id_ = other.id_;
          spellId_ = other.spellId_;
          createdAtTick_ = other.createdAtTick_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          rotation_ = other.rotation_;
          target_ = other.target_;
          speed_ = other.speed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Projectile Clone() {
          return new Projectile(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        ///system
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spell_id" field.</summary>
        public const int SpellIdFieldNumber = 2;
        private long spellId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SpellId {
          get { return spellId_; }
          set {
            spellId_ = value;
          }
        }

        /// <summary>Field number for the "created_at_tick" field.</summary>
        public const int CreatedAtTickFieldNumber = 3;
        private long createdAtTick_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CreatedAtTick {
          get { return createdAtTick_; }
          set {
            createdAtTick_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 4;
        private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 5;
        private float rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 6;
        private string target_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Target {
          get { return target_; }
          set {
            target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "speed" field.</summary>
        public const int SpeedFieldNumber = 7;
        private float speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed {
          get { return speed_; }
          set {
            speed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Projectile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Projectile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (SpellId != other.SpellId) return false;
          if (CreatedAtTick != other.CreatedAtTick) return false;
          if (!object.Equals(Position, other.Position)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
          if (Target != other.Target) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (SpellId != 0L) hash ^= SpellId.GetHashCode();
          if (CreatedAtTick != 0L) hash ^= CreatedAtTick.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
          if (Target.Length != 0) hash ^= Target.GetHashCode();
          if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (SpellId != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(SpellId);
          }
          if (CreatedAtTick != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(CreatedAtTick);
          }
          if (position_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Position);
          }
          if (Rotation != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Rotation);
          }
          if (Target.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Target);
          }
          if (Speed != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(Speed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (SpellId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
          }
          if (CreatedAtTick != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAtTick);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (Rotation != 0F) {
            size += 1 + 4;
          }
          if (Target.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
          }
          if (Speed != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Projectile other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.SpellId != 0L) {
            SpellId = other.SpellId;
          }
          if (other.CreatedAtTick != 0L) {
            CreatedAtTick = other.CreatedAtTick;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
            }
            Position.MergeFrom(other.Position);
          }
          if (other.Rotation != 0F) {
            Rotation = other.Rotation;
          }
          if (other.Target.Length != 0) {
            Target = other.Target;
          }
          if (other.Speed != 0F) {
            Speed = other.Speed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                SpellId = input.ReadInt64();
                break;
              }
              case 24: {
                CreatedAtTick = input.ReadInt64();
                break;
              }
              case 34: {
                if (position_ == null) {
                  position_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Vector2Df();
                }
                input.ReadMessage(position_);
                break;
              }
              case 45: {
                Rotation = input.ReadFloat();
                break;
              }
              case 50: {
                Target = input.ReadString();
                break;
              }
              case 61: {
                Speed = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Vector2Df : pb::IMessage<Vector2Df> {
        private static readonly pb::MessageParser<Vector2Df> _parser = new pb::MessageParser<Vector2Df>(() => new Vector2Df());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Vector2Df> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2Df() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2Df(Vector2Df other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Vector2Df Clone() {
          return new Vector2Df(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private float x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private float y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Vector2Df);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Vector2Df other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
          if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(X);
          }
          if (Y != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0F) {
            size += 1 + 4;
          }
          if (Y != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Vector2Df other) {
          if (other == null) {
            return;
          }
          if (other.X != 0F) {
            X = other.X;
          }
          if (other.Y != 0F) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                X = input.ReadFloat();
                break;
              }
              case 21: {
                Y = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Client_Character : pb::IMessage<Client_Character> {
    private static readonly pb::MessageParser<Client_Character> _parser = new pb::MessageParser<Client_Character>(() => new Client_Character());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Client_Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Character(Client_Character other) : this() {
      clientTick_ = other.clientTick_;
      xAxis_ = other.xAxis_;
      yAxis_ = other.yAxis_;
      rotation_ = other.rotation_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Character Clone() {
      return new Client_Character(this);
    }

    /// <summary>Field number for the "client_tick" field.</summary>
    public const int ClientTickFieldNumber = 1;
    private long clientTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTick {
      get { return clientTick_; }
      set {
        clientTick_ = value;
      }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 2;
    private float xAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "y_axis" field.</summary>
    public const int YAxisFieldNumber = 3;
    private float yAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YAxis {
      get { return yAxis_; }
      set {
        yAxis_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 5;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Client_Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Client_Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTick != other.ClientTick) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YAxis, other.YAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTick != 0L) hash ^= ClientTick.GetHashCode();
      if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
      if (YAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YAxis);
      if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTick != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTick);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XAxis);
      }
      if (YAxis != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YAxis);
      }
      if (Rotation != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Rotation);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTick);
      }
      if (XAxis != 0F) {
        size += 1 + 4;
      }
      if (YAxis != 0F) {
        size += 1 + 4;
      }
      if (Rotation != 0F) {
        size += 1 + 4;
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Client_Character other) {
      if (other == null) {
        return;
      }
      if (other.ClientTick != 0L) {
        ClientTick = other.ClientTick;
      }
      if (other.XAxis != 0F) {
        XAxis = other.XAxis;
      }
      if (other.YAxis != 0F) {
        YAxis = other.YAxis;
      }
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientTick = input.ReadInt64();
            break;
          }
          case 21: {
            XAxis = input.ReadFloat();
            break;
          }
          case 29: {
            YAxis = input.ReadFloat();
            break;
          }
          case 37: {
            Rotation = input.ReadFloat();
            break;
          }
          case 42: {
            Target = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Client_Cast : pb::IMessage<Client_Cast> {
    private static readonly pb::MessageParser<Client_Cast> _parser = new pb::MessageParser<Client_Cast>(() => new Client_Cast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Client_Cast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Cast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Cast(Client_Cast other) : this() {
      spellId_ = other.spellId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Client_Cast Clone() {
      return new Client_Cast(this);
    }

    /// <summary>Field number for the "spell_id" field.</summary>
    public const int SpellIdFieldNumber = 1;
    private long spellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SpellId {
      get { return spellId_; }
      set {
        spellId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Client_Cast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Client_Cast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpellId != other.SpellId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpellId != 0L) hash ^= SpellId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpellId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SpellId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpellId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SpellId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Client_Cast other) {
      if (other == null) {
        return;
      }
      if (other.SpellId != 0L) {
        SpellId = other.SpellId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpellId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
