// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchstate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NakamaMinimalGame.PublicMatchState {

  /// <summary>Holder for reflection information generated from matchstate.proto</summary>
  public static partial class MatchstateReflection {

    #region Descriptor
    /// <summary>File descriptor for matchstate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchstateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtYXRjaHN0YXRlLnByb3RvEgRtYWluIqsCChBQdWJsaWNNYXRjaFN0YXRl",
            "EjIKBnBsYXllchgBIAMoCzIiLm1haW4uUHVibGljTWF0Y2hTdGF0ZS5QbGF5",
            "ZXJFbnRyeRIpCgRiYWxsGAIgASgLMhsubWFpbi5QdWJsaWNNYXRjaFN0YXRl",
            "LkJhbGwaTAoLUGxheWVyRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIg",
            "ASgLMh0ubWFpbi5QdWJsaWNNYXRjaFN0YXRlLlBsYXllcjoCOAEaJgoGUGxh",
            "eWVyEgoKAmlkGAEgASgJEhAKCHBvc2l0aW9uGAIgASgFGkIKBEJhbGwSDQoF",
            "cG9zX3gYASABKAUSDQoFcG9zX3kYAiABKAUSDQoFZGlyX3gYAyABKAUSDQoF",
            "ZGlyX3kYBCABKAVCJaoCIk5ha2FtYU1pbmltYWxHYW1lLlB1YmxpY01hdGNo",
            "U3RhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Parser, new[]{ "Player", "Ball" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player.Parser, new[]{ "Id", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball), global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball.Parser, new[]{ "PosX", "PosY", "DirX", "DirY" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PublicMatchState : pb::IMessage<PublicMatchState> {
    private static readonly pb::MessageParser<PublicMatchState> _parser = new pb::MessageParser<PublicMatchState>(() => new PublicMatchState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicMatchState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NakamaMinimalGame.PublicMatchState.MatchstateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState(PublicMatchState other) : this() {
      player_ = other.player_.Clone();
      Ball = other.ball_ != null ? other.Ball.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicMatchState Clone() {
      return new PublicMatchState(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private static readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>.Codec _map_player_codec
        = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player.Parser), 10);
    private readonly pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player> player_ = new pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Player> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "ball" field.</summary>
    public const int BallFieldNumber = 2;
    private global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball ball_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball Ball {
      get { return ball_; }
      set {
        ball_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicMatchState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicMatchState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Player.Equals(other.Player)) return false;
      if (!object.Equals(Ball, other.Ball)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Player.GetHashCode();
      if (ball_ != null) hash ^= Ball.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      player_.WriteTo(output, _map_player_codec);
      if (ball_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ball);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += player_.CalculateSize(_map_player_codec);
      if (ball_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ball);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicMatchState other) {
      if (other == null) {
        return;
      }
      player_.Add(other.player_);
      if (other.ball_ != null) {
        if (ball_ == null) {
          ball_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball();
        }
        Ball.MergeFrom(other.Ball);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            player_.AddEntriesFrom(input, _map_player_codec);
            break;
          }
          case 18: {
            if (ball_ == null) {
              ball_ = new global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Types.Ball();
            }
            input.ReadMessage(ball_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PublicMatchState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Player : pb::IMessage<Player> {
        private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Player> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player(Player other) : this() {
          id_ = other.id_;
          position_ = other.position_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Player Clone() {
          return new Player(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 2;
        private int position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Player);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Player other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Position != other.Position) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Position != 0) hash ^= Position.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Position != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Position);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Player other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Position != 0) {
            Position = other.Position;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                Position = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Ball : pb::IMessage<Ball> {
        private static readonly pb::MessageParser<Ball> _parser = new pb::MessageParser<Ball>(() => new Ball());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ball> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NakamaMinimalGame.PublicMatchState.PublicMatchState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ball() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ball(Ball other) : this() {
          posX_ = other.posX_;
          posY_ = other.posY_;
          dirX_ = other.dirX_;
          dirY_ = other.dirY_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ball Clone() {
          return new Ball(this);
        }

        /// <summary>Field number for the "pos_x" field.</summary>
        public const int PosXFieldNumber = 1;
        private int posX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PosX {
          get { return posX_; }
          set {
            posX_ = value;
          }
        }

        /// <summary>Field number for the "pos_y" field.</summary>
        public const int PosYFieldNumber = 2;
        private int posY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PosY {
          get { return posY_; }
          set {
            posY_ = value;
          }
        }

        /// <summary>Field number for the "dir_x" field.</summary>
        public const int DirXFieldNumber = 3;
        private int dirX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DirX {
          get { return dirX_; }
          set {
            dirX_ = value;
          }
        }

        /// <summary>Field number for the "dir_y" field.</summary>
        public const int DirYFieldNumber = 4;
        private int dirY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DirY {
          get { return dirY_; }
          set {
            dirY_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Ball);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ball other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PosX != other.PosX) return false;
          if (PosY != other.PosY) return false;
          if (DirX != other.DirX) return false;
          if (DirY != other.DirY) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PosX != 0) hash ^= PosX.GetHashCode();
          if (PosY != 0) hash ^= PosY.GetHashCode();
          if (DirX != 0) hash ^= DirX.GetHashCode();
          if (DirY != 0) hash ^= DirY.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PosX != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PosX);
          }
          if (PosY != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(PosY);
          }
          if (DirX != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(DirX);
          }
          if (DirY != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(DirY);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PosX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
          }
          if (PosY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
          }
          if (DirX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
          }
          if (DirY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ball other) {
          if (other == null) {
            return;
          }
          if (other.PosX != 0) {
            PosX = other.PosX;
          }
          if (other.PosY != 0) {
            PosY = other.PosY;
          }
          if (other.DirX != 0) {
            DirX = other.DirX;
          }
          if (other.DirY != 0) {
            DirY = other.DirY;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PosX = input.ReadInt32();
                break;
              }
              case 16: {
                PosY = input.ReadInt32();
                break;
              }
              case 24: {
                DirX = input.ReadInt32();
                break;
              }
              case 32: {
                DirY = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
